[
    {
        "sample_id": 0,
        "k_value": 5,
        "code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    # First, sort the numbers to ensure we only need to check consecutive elements\n    numbers.sort()\n\n    # Iterate over the sorted list and compare consecutive pairs\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n\n    return False",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 1,
        "k_value": 5,
        "code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those groups into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other.\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = paren_string.replace(' ', '')  # Remove any spaces\n    result = []\n    current_group = ''\n    balance = 0\n\n    for char in paren_string:\n        current_group += char\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        \n        # When balance is zero, we have a complete group\n        if balance == 0:\n            result.append(current_group)\n            current_group = ''  # Reset for next group\n\n    return result",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 2,
        "k_value": 5,
        "code": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 3,
        "k_value": 5,
        "code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 4,
        "k_value": 5,
        "code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    if not numbers:\n        return 0.0\n\n    mean = sum(numbers) / len(numbers)\n    abs_deviations = [abs(num - mean) for num in numbers]\n    mad = sum(abs_deviations) / len(numbers)\n    return mad",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 5,
        "k_value": 5,
        "code": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    \"\"\" Insert a number 'delimiter' between every two consecutive elements of input list `numbers`\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return numbers\n    \n    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimiter)\n    result.append(numbers[-1])\n    \n    return result",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 6,
        "k_value": 5,
        "code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented by multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    def max_nesting(paren_group: str) -> int:\n        max_depth = 0\n        current_depth = 0\n        for char in paren_group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        return max_depth\n\n    groups = paren_string.split()\n    return [max_nesting(group) for group in groups]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 7,
        "k_value": 5,
        "code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 8,
        "k_value": 5,
        "code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    total_sum = sum(numbers)\n    total_product = 1\n    for number in numbers:\n        total_product *= number\n    return (total_sum, total_product)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 9,
        "k_value": 5,
        "code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n        return []\n    \n    result = []\n    current_max = float('-inf')\n    \n    for num in numbers:\n        current_max = max(current_max, num)\n        result.append(current_max)\n    \n    return result",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 10,
        "k_value": 5,
        "code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Step 1: Check if the input string is already a palindrome\n    if is_palindrome(string):\n        return string\n    \n    # Step 2: Initialize a loop to find the longest palindromic suffix\n    longest_palindromic_suffix_index = len(string)  # Start with the entire string\n    \n    # Step 3 and 4: Iterate backwards over possible suffix lengths\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindromic_suffix_index = i\n            break\n    \n    # Step 5: Determine the prefix that comes before the palindromic suffix\n    prefix = string[:longest_palindromic_suffix_index]\n    \n    # Step 6: Reverse the prefix\n    reversed_prefix = prefix[::-1]\n    \n    # Step 7: Append the reversed prefix to the original string\n    result = string + reversed_prefix\n    \n    # Step 8: Return the newly formed palindrome\n    return result",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 11,
        "k_value": 5,
        "code": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Ensure the strings a and b have the same length\n\n    # Perform XOR operation for each pair of bits and join the result as a string\n    result = ''.join('1' if x != y else '0' for x, y in zip(a, b))\n    \n    return result",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 12,
        "k_value": 5,
        "code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    \n    return max(strings, key=len)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 13,
        "k_value": 5,
        "code": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 14,
        "k_value": 5,
        "code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string) + 1)]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 15,
        "k_value": 5,
        "code": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 up to n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n + 1))",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 16,
        "k_value": 5,
        "code": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    # Convert the string to lowercase to ignore case differences\n    lowercase_string = string.lower()\n    # Use a set to store distinct characters as it automatically handles duplicates\n    distinct_characters = set(lowercase_string)\n    # Return the length of the set which represents the number of distinct characters\n    return len(distinct_characters)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 17,
        "k_value": 5,
        "code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return a list of integers corresponding to how many beats each\n    note lasts.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quarter note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # Split the input string by spaces to get individual notes\n    notes = music_string.split()\n    \n    # Mapping of notes to their corresponding number of beats\n    beats_map = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    \n    # List to store the beats for each note\n    beats = []\n    \n    # Iterate over the notes and use the map to convert each to its beat value\n    for note in notes:\n        if note in beats_map:\n            beats.append(beats_map[note])\n    \n    return beats",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 18,
        "k_value": 5,
        "code": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlapping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = start = 0\n    while start <= len(string) - len(substring):\n        pos = string.find(substring, start)\n        if pos != -1:\n            count += 1\n            start = pos + 1\n        else:\n            break\n    return count",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 19,
        "k_value": 5,
        "code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numerals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    numeral_to_digit = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, \n        'four': 4, 'five': 5, 'six': 6, 'seven': 7, \n        'eight': 8, 'nine': 9\n    }\n    \n    digit_to_numeral = {v: k for k, v in numeral_to_digit.items()}\n    \n    # Split the input string into numerals\n    numeral_list = numbers.split()\n    \n    # Convert numerals to digits\n    digit_list = [numeral_to_digit[numeral] for numeral in numeral_list]\n    \n    # Sort the list of digits\n    digit_list.sort()\n    \n    # Convert digits back to numerals\n    sorted_numeral_list = [digit_to_numeral[digit] for digit in digit_list]\n    \n    # Join the sorted numerals into a single string\n    return ' '.join(sorted_numeral_list)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 20,
        "k_value": 5,
        "code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Sort the numbers first\n    numbers.sort()\n    \n    # Initialize variables to store the minimum difference and the closest pair\n    min_diff = float('inf')\n    closest_pair = (numbers[0], numbers[1])\n    \n    # Iterate through the sorted list to find the closest pair\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    \n    return closest_pair",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 21,
        "k_value": 5,
        "code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]\n\n# Example usage",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 22,
        "k_value": 5,
        "code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" \n    Filter given list of any python values only for integers.\n    \n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 23,
        "k_value": 5,
        "code": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 24,
        "k_value": 5,
        "code": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 25,
        "k_value": 5,
        "code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 26,
        "k_value": 5,
        "code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    from collections import Counter\n    \n    # Count the occurrences of each number\n    counts = Counter(numbers)\n    \n    # Filter the numbers that occur exactly once\n    result = [num for num in numbers if counts[num] == 1]\n    \n    return result",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 27,
        "k_value": 5,
        "code": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 28,
        "k_value": 5,
        "code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 29,
        "k_value": 5,
        "code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 30,
        "k_value": 5,
        "code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 31,
        "k_value": 5,
        "code": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 32,
        "k_value": 5,
        "code": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    \n    def derivative(coeffs):\n        return [i * coeffs[i] for i in range(1, len(coeffs))]\n\n    def newton_method(coeffs, x0, tol=1e-7, max_iter=1000):\n        for _ in range(max_iter):\n            fx = poly(coeffs, x0)\n            if abs(fx) < tol:\n                return x0\n            dfx = poly(derivative(coeffs), x0)\n            if dfx == 0:\n                return x0\n            x0 = x0 - fx / dfx\n        return x0\n    \n    # Start with an initial guess of zero\n    initial_guess = 0.0\n    return newton_method(xs, initial_guess)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 33,
        "k_value": 5,
        "code": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal\n    to the values of the corresponding indices of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    # Extract elements at indices divisible by 3.\n    indices = [i for i in range(len(l)) if i % 3 == 0]\n    values = [l[i] for i in indices]\n    \n    # Sort the extracted values.\n    sorted_values = sorted(values)\n    \n    # Create a new list for the result.\n    result = l[:]\n    \n    # Place the sorted values back into the result list at the corresponding indices.\n    for idx, value in zip(indices, sorted_values):\n        result[idx] = value\n    \n    return result",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 34,
        "k_value": 5,
        "code": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 35,
        "k_value": 5,
        "code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if not l:\n        raise ValueError(\"List is empty\")\n    return max(l)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 36,
        "k_value": 5,
        "code": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\n# Test cases",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 37,
        "k_value": 5,
        "code": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    # Extract values at even indices\n    even_indices_values = [l[i] for i in range(0, len(l), 2)]\n    \n    # Sort the extracted even index values\n    even_indices_values.sort()\n    \n    # Reconstruct the list with sorted even index values\n    sorted_list = l[:]\n    for i, val in zip(range(0, len(l), 2), even_indices_values):\n        sorted_list[i] = val\n    \n    return sorted_list",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 38,
        "k_value": 5,
        "code": "def encode_cyclic(s: str):\n    \"\"\"\n    Returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # Split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # Cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    Takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # Split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # Reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 39,
        "k_value": 5,
        "code": "def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    \n    def fibonacci():\n        a, b = 0, 1\n        while True:\n            yield b\n            a, b = b, a + b\n    \n    fib_gen = fibonacci()\n    count = 0\n    \n    while count < n:\n        fib_num = next(fib_gen)\n        if is_prime(fib_num):\n            count += 1\n    \n    return fib_num",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 40,
        "k_value": 5,
        "code": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    It returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    n = len(l)\n    l.sort()\n    for i in range(n - 2):\n        left, right = i + 1, n - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 41,
        "k_value": 5,
        "code": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right; simultaneously, a different set of n cars\n    are driving right to left. The two sets of cars start out being very far from\n    each other. All cars move at the same speed. Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # Since every car traveling left to right will collide with every car traveling right to left,\n    # the total number of collisions is simply n * n.\n    return n * n",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 42,
        "k_value": 5,
        "code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 43,
        "k_value": 5,
        "code": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 44,
        "k_value": 5,
        "code": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    Return string representation after the conversion.\n    Base numbers are less than 10.\n    \n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n        \n    result = ''\n    \n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x //= base\n    \n    return result",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 45,
        "k_value": 5,
        "code": "def triangle_area(a, h):\n    \"\"\"Given length of a side (base) and height, return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 46,
        "k_value": 5,
        "code": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence. Do not use recursion.\n    \"\"\"\n    \n    # Base cases\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    \n    # Initialize a list to keep the last four computed values\n    fib4_values = [0, 0, 2, 0]\n    \n    for i in range(4, n + 1):\n        next_value = fib4_values[0] + fib4_values[1] + fib4_values[2] + fib4_values[3]\n        fib4_values = [fib4_values[1], fib4_values[2], fib4_values[3], next_value]\n    \n    return fib4_values[3]\n\n# Example usage",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 47,
        "k_value": 5,
        "code": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    mid = n // 2\n    \n    if n % 2 == 0:\n        # If even, return the average of the two middle elements\n        return (sorted_list[mid - 1] + sorted_list[mid]) / 2.0\n    else:\n        # If odd, return the middle element\n        return sorted_list[mid]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 48,
        "k_value": 5,
        "code": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 49,
        "k_value": 5,
        "code": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 50,
        "k_value": 5,
        "code": "def encode_shift(s: str):\n    \"\"\"\n    Returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s if ch.isalpha()])\n\ndef decode_shift(s: str):\n    \"\"\"\n    Takes as input a string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s if ch.isalpha()])\n\n# Example usage:\nencoded = encode_shift(\"hello\")\ndecoded = decode_shift(encoded)\n\n",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 51,
        "k_value": 5,
        "code": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes a string and returns a string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in text if char not in vowels)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 52,
        "k_value": 5,
        "code": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 53,
        "k_value": 5,
        "code": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 54,
        "k_value": 5,
        "code": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return set(s0) == set(s1)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 55,
        "k_value": 5,
        "code": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 56,
        "k_value": 5,
        "code": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    balance = 0\n    for char in brackets:\n        if char == \"<\":\n            balance += 1\n        elif char == \">\":\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 57,
        "k_value": 5,
        "code": "def monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if all(l[i] <= l[i+1] for i in range(len(l) - 1)):\n        return True\n    if all(l[i] >= l[i+1] for i in range(len(l) - 1)):\n        return True\n    return False",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 58,
        "k_value": 5,
        "code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) & set(l2))",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 59,
        "k_value": 5,
        "code": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Start with the smallest prime number\n    factor = 2\n    \n    # While n has factors greater than 1\n    while n > 1:\n        # If factor divides n, then it's a factor\n        if n % factor == 0:\n            n //= factor  # Divide n by this factor\n        else:\n            # Move to the next possible factor\n            factor += 1\n            \n    # The last factor is the largest prime factor\n    return factor",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 60,
        "k_value": 5,
        "code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return n * (n + 1) // 2",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 61,
        "k_value": 5,
        "code": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    balance = 0\n    for bracket in brackets:\n        if bracket == '(':\n            balance += 1\n        elif bracket == ')':\n            balance -= 1\n        # If balance is negative, there are more closing than opening\n        if balance < 0:\n            return False\n    # Must be zero for perfectly balanced brackets\n    return balance == 0",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 62,
        "k_value": 5,
        "code": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [xs[i] * i for i in range(1, len(xs))]\n\n# Example usage:\n# print(derivative([3, 1, 2, 4, 5]))\n# print(derivative([1, 2, 3]))",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 63,
        "k_value": 5,
        "code": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    # Define the base cases\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    \n    # Initialize a list to store the values\n    fibfib_sequence = [0, 0, 1]\n    \n    # Compute the values from 3 to n\n    for i in range(3, n+1):\n        next_value = fibfib_sequence[-1] + fibfib_sequence[-2] + fibfib_sequence[-3]\n        fibfib_sequence.append(next_value)\n    \n    return fibfib_sequence[n]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 64,
        "k_value": 5,
        "code": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    s = s.lower()  # convert string to lowercase for uniformity\n\n    for i, char in enumerate(s):\n        if char in vowels:\n            count += 1\n        elif char == 'y' and i == len(s) - 1:\n            count += 1\n    \n    return count\n\n# Test cases",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 65,
        "k_value": 5,
        "code": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    digits = str(x)\n    num_digits = len(digits)\n    \n    if shift > num_digits:\n        return digits[::-1]\n    \n    shift = shift % num_digits\n    return digits[-shift:] + digits[:-shift]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 66,
        "k_value": 5,
        "code": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(char) for char in s if char.isupper())\n\n# Test cases",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 67,
        "k_value": 5,
        "code": "def fruit_distribution(s, n):\n    \"\"\"\n    This function calculates the number of mango fruits in a basket by subtracting\n    the number of apples and oranges from the total number of fruits in the basket.\n    \n    :param s: A string representation of the number of apples and oranges.\n    :param n: An integer representing the total number of fruits in the basket.\n    :return: An integer of the number of mango fruits in the basket.\n    \"\"\"\n    # Split the string using spaces to get individual words\n    parts = s.split()\n    \n    # Extract numbers for apples and oranges\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    \n    # Calculate mangoes\n    mangoes = n - apples - oranges\n    \n    return mangoes",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 68,
        "k_value": 5,
        "code": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes,\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found, return the node that has the smallest index.\n    \n    The plucked node should be returned in a list, [smallest_value, its index].\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    min_even = None\n    min_index = None\n    \n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n            if min_even is None or value < min_even:\n                min_even = value\n                min_index = index\n\n    if min_even is not None:\n        return [min_even, min_index]\n    else:\n        return []",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 69,
        "k_value": 5,
        "code": "def search(lst):\n    from collections import Counter\n\n    # Count the frequency of each integer in the list\n    freq = Counter(lst)\n\n    # Initialize a variable to keep track of the greatest integer found\n    greatest_int = -1\n\n    # Iterate over the frequency dictionary\n    for num, count in freq.items():\n        # Check if the integer satisfies the condition\n        if count >= num:\n            # Update the greatest integer if current number is greater\n            greatest_int = max(greatest_int, num)\n\n    return greatest_int",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 70,
        "k_value": 5,
        "code": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting is when you start with the minimum value,\n    then the maximum of the remaining integers, then minimum, and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    lst = lst.copy()  # To avoid altering the original list\n\n    while lst:\n        # Append the minimum value from the list\n        min_value = min(lst)\n        result.append(min_value)\n        lst.remove(min_value)\n\n        if lst:\n            # Append the maximum value from the list\n            max_value = max(lst)\n            result.append(max_value)\n            lst.remove(max_value)\n\n    return result",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 71,
        "k_value": 5,
        "code": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    # Check if the sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Use Heron's formula to calculate the area\n        s = (a + b + c) / 2  # Semi-perimeter\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 72,
        "k_value": 5,
        "code": "def will_it_fly(q, w):\n    # Check if the list q is a palindrome\n    is_balanced = q == q[::-1]\n    \n    # Calculate the sum of the elements in q\n    total_weight = sum(q)\n    \n    # The object will fly if it's balanced and the total weight is less than or equal to w\n    return is_balanced and total_weight <= w",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 73,
        "k_value": 5,
        "code": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n    \"\"\"\n    changes_needed = 0\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        if arr[left] != arr[right]:\n            changes_needed += 1\n        left += 1\n        right -= 1\n\n    return changes_needed\n\n# Examples",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 74,
        "k_value": 5,
        "code": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) ➞ []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n    '''\n    len_lst1 = sum(len(s) for s in lst1)\n    len_lst2 = sum(len(s) for s in lst2)\n    \n    if len_lst1 < len_lst2:\n        return lst1\n    elif len_lst1 > len_lst2:\n        return lst2\n    else:\n        return lst1",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 75,
        "k_value": 5,
        "code": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is \n    the multiplication of 3 prime numbers and false otherwise. \n    Knowing that (a) is less than 100.\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # List all prime numbers less than 100\n    primes = [i for i in range(2, 100) if is_prime(i)]\n\n    # Check if a can be expressed as the product of exactly 3 primes\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 76,
        "k_value": 5,
        "code": "def is_simple_power(x, n):\n    if x == 1:\n        return True\n    if n == 1:\n        return x == 1\n\n    current = n\n    while current <= x:\n        if current == x:\n            return True\n        current *= n\n        \n    return False",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 77,
        "k_value": 5,
        "code": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    # Handle the negative numbers and zero correctly\n    if a < 0:\n        root = round(abs(a) ** (1/3))  # Calculate the cubic root of the absolute value\n        return root ** 3 == -a  # Cube the root and check with the negative of the input\n    else:\n        root = round(a ** (1/3))  # Calculate the cubic root\n        return root ** 3 == a  # Cube the root and check with the input\n\n# Testing the function with example inputs",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 78,
        "k_value": 5,
        "code": "def hex_key(num):\n    # Define the set of prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    \n    # Count how many characters in num are in the prime_hex_digits set\n    return sum(1 for digit in num if digit in prime_hex_digits)\n\n# Example usage:",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 79,
        "k_value": 5,
        "code": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    # Convert the decimal number to binary using bin(), and remove the '0b' prefix\n    binary_representation = bin(decimal)[2:]\n    # Add 'db' at the beginning and at the end\n    formatted_binary = f\"db{binary_representation}db\"\n    return formatted_binary",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 80,
        "k_value": 5,
        "code": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    return True",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 81,
        "k_value": 5,
        "code": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \"\"\"\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:  # gpa == 0.0\n            letter_grades.append('E')\n    return letter_grades\n\n# Example usage:",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 82,
        "k_value": 5,
        "code": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise.\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n        \n    return is_prime(len(string))\n\n# Examples",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 83,
        "k_value": 5,
        "code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n\n    # Total numbers starting with 1: 10^(n-1)\n    start_with_1 = 10 ** (n - 1)\n    \n    # Total numbers ending with 1: 9 * 10^(n-2) (since first digit cannot be 0)\n    end_with_1 = 9 * 10 ** (n - 2)\n    \n    # To avoid double counting numbers that start and end with 1\n    both_start_and_end_with_1 = 10 ** (n - 2)\n    \n    return start_with_1 + end_with_1 - both_start_and_end_with_1",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 84,
        "k_value": 5,
        "code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    # Convert the integer to a string to iterate over each digit\n    digits = str(N)\n    # Initialize sum of digits\n    sum_of_digits = 0\n    # Iterate over each character, convert it to an integer, and add to sum_of_digits\n    for digit in digits:\n        sum_of_digits += int(digit)\n    # Return the binary representation of the sum_of_digits\n    return bin(sum_of_digits)[2:]\n\n# Example usage:\n# For N = 1000, the sum of digits is 1, so output is \"1\".\n# For N = 150, the sum of digits is 6, so output is \"110\".\n# For N = 147, the sum of digits is 12, so output is \"1100\".",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 85,
        "k_value": 5,
        "code": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst, add the even elements that are at odd indices.\"\"\"\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)\n\n# Example usage:\n# result = add([4, 2, 6, 7])\n# print(result)  # Output should be 2",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 86,
        "k_value": 5,
        "code": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    # Split the input string using spaces to identify individual words\n    words = s.split(' ')\n    \n    # Sort each word individually, then join them with spaces to reconstruct\n    sorted_words = [''.join(sorted(word)) for word in words]\n    \n    # Join the sorted words with a space, keeping the original spaces\n    return ' '.join(sorted_words)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 87,
        "k_value": 5,
        "code": "def get_row(lst, x):\n    result = []\n    for row_idx, row in enumerate(lst):\n        for col_idx, value in enumerate(row):\n            if value == x:\n                result.append((row_idx, col_idx))\n    \n    # Sort result by rows first (ascending), then by columns (descending)\n    result.sort(key=lambda coord: (coord[0], -coord[1]))\n    return result",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 88,
        "k_value": 5,
        "code": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting.\n    Sort the given array in ascending order if the sum of the first and last index values is odd,\n    or in descending order if the sum is even.\n\n    Note:\n    * Don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return array  # Return empty array if input is empty\n\n    sum_first_last = array[0] + array[-1]\n    \n    if sum_first_last % 2 == 0:\n        return sorted(array, reverse=True)  # Sort in descending order\n    else:\n        return sorted(array)  # Sort in ascending order",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 89,
        "k_value": 5,
        "code": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    encrypted = []\n    for char in s:\n        # Rotate each character by 4 places (2 * 2)\n        new_char = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n        encrypted.append(new_char)\n    return ''.join(encrypted)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 90,
        "k_value": 5,
        "code": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    unique_elements = set(lst)\n    \n    if len(unique_elements) < 2:\n        return None\n    \n    sorted_elements = sorted(unique_elements)\n    \n    return sorted_elements[1]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 91,
        "k_value": 5,
        "code": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    # Split the string into sentences by '.', '?', '!'\n    sentences = []\n\n    # Splitting in a loop to handle multiple delimiters\n    parts = S.split('.')\n    for part in parts:\n        sub_parts = part.split('?')\n        for sub_part in sub_parts:\n            sentences.extend(sub_part.split('!'))\n\n    # Count sentences that start with \"I\"\n    count = 0\n    for sentence in sentences:\n        # Strip leading/trailing whitespace and check if it starts with 'I'\n        if sentence.strip().startswith('I '):  # Added space to ensure word boundary\n            count += 1\n\n    return count",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 92,
        "k_value": 5,
        "code": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) ➞ True\n    \n    any_int(3, 2, 2) ➞ False\n\n    any_int(3, -2, 1) ➞ True\n    \n    any_int(3.6, -2.2, 2) ➞ False\n    '''\n    # Check if all inputs are integers\n    if all(isinstance(i, int) for i in (x, y, z)):\n        # Check if any number is the sum of the other two\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 93,
        "k_value": 5,
        "code": "def encode(message):\n    def shift_vowel(c):\n        vowels = 'aeiou'\n        # Shift each vowel by two places\n        shifted = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w'}\n        if c.lower() in vowels:\n            return shifted[c.lower()].upper() if c.isupper() else shifted[c.lower()]\n        return c\n\n    # Swap case and shift vowels in one pass\n    return ''.join(shift_vowel(c).swapcase() for c in message)\n\n# Examples",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 94,
        "k_value": 5,
        "code": "def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n    \"\"\"\n    def is_prime(n):\n        \"\"\"Helper function to determine if a number is prime.\"\"\"\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        \"\"\"Helper function to calculate the sum of digits of a number.\"\"\"\n        return sum(int(digit) for digit in str(n))\n\n    largest_prime = None\n\n    for number in lst:\n        if is_prime(number):\n            if largest_prime is None or number > largest_prime:\n                largest_prime = number\n\n    if largest_prime is not None:\n        return sum_of_digits(largest_prime)\n\n    return 0\n\n# Test cases",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 95,
        "k_value": 5,
        "code": "def check_dict_case(d):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False if the given dictionary is empty.\n    \"\"\"\n    if not d:\n        return False\n    \n    keys = d.keys()\n\n    # Check if all keys are either lower-case strings\n    all_lower = all(isinstance(key, str) and key.islower() for key in keys)\n    \n    # Check if all keys are either upper-case strings\n    all_upper = all(isinstance(key, str) and key.isupper() for key in keys)\n\n    return all_lower or all_upper",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 96,
        "k_value": 5,
        "code": "def is_prime(num):\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes a non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    \"\"\"\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 97,
        "k_value": 5,
        "code": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14, -15) should return 20.\n    \"\"\"\n    # Get the unit digit of 'a' using the remainder operator\n    unit_digit_a = abs(a) % 10\n    # Get the unit digit of 'b' using the remainder operator\n    unit_digit_b = abs(b) % 10\n    # Return the product of the unit digits\n    return unit_digit_a * unit_digit_b",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 98,
        "k_value": 5,
        "code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    uppercase_vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    \n    for i in range(0, len(s), 2):\n        if s[i] in uppercase_vowels:\n            count += 1\n            \n    return count",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 99,
        "k_value": 5,
        "code": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    number = float(value)\n    if number > 0:\n        return int(number + 0.5)\n    else:\n        return int(number - 0.5)\n\n# Example usage:",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 100,
        "k_value": 5,
        "code": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    levels = []\n    current_level_stones = n\n    \n    for _ in range(n):\n        levels.append(current_level_stones)\n        if current_level_stones % 2 == 0:\n            current_level_stones += 2\n        else:\n            current_level_stones += 2\n    \n    return levels",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 101,
        "k_value": 5,
        "code": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # Replace commas with spaces\n    s = s.replace(',', ' ')\n    # Split the string by spaces\n    words = s.split()\n    # Return the list of words\n    return words",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 102,
        "k_value": 5,
        "code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Ensure x is less than or equal to y\n    if x > y:\n        return -1\n\n    # Start checking from the largest number in the range\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n    return -1",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 103,
        "k_value": 5,
        "code": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    \n    # Calculate the sum of integers from n to m\n    total_sum = sum(range(n, m + 1))\n    # Calculate the total number of values from n to m\n    count = m - n + 1\n    # Find the average\n    average = total_sum / count\n    # Round the average to the nearest integer\n    rounded_average = round(average)\n    # Convert the rounded average to binary\n    return bin(rounded_average)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 104,
        "k_value": 5,
        "code": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x, return a sorted list of all \n    elements that don't have any even digit.\n    \n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    def has_even_digit(n):\n        \"\"\"Check if a number has any even digit.\"\"\"\n        return any(int(digit) % 2 == 0 for digit in str(n))\n\n    result = [num for num in x if not has_even_digit(num)]\n    return sorted(result)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 105,
        "k_value": 5,
        "code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \"\"\"\n    \n    # Define a dictionary for the digit names\n    digit_names = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    # Filter numbers that are between 1 and 9 inclusive\n    filtered_numbers = [x for x in arr if 1 <= x <= 9]\n    \n    # Sort the filtered numbers\n    sorted_numbers = sorted(filtered_numbers)\n    \n    # Reverse the sorted numbers\n    sorted_numbers.reverse()\n    \n    # Map the numbers to their corresponding names\n    result = [digit_names[x] for x in sorted_numbers]\n    \n    return result",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 106,
        "k_value": 5,
        "code": "def f(n):\n    def factorial(x):\n        result = 1\n        for i in range(1, x + 1):\n            result *= i\n        return result\n\n    def sum_to(x):\n        return sum(range(1, x + 1))\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to(i))\n\n    return result\n\n# Example usage:\n# print(f(5))  # Output: [1, 2, 6, 24, 15]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 107,
        "k_value": 5,
        "code": "def even_odd_palindrome(n):\n    def is_palindrome(x):\n        s = str(x)\n        return s == s[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for number in range(1, n + 1):\n        if is_palindrome(number):\n            if number % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n\n# Example usage:\n# print(even_odd_palindrome(3))  # Output: (1, 2)\n# print(even_odd_palindrome(12)) # Output: (4, 6)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 108,
        "k_value": 5,
        "code": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    def digit_sum(n):\n        # Convert number to string and handle the first digit sign separately\n        str_n = str(n)\n        if str_n[0] == '-':\n            return int(str_n[0] + str_n[1]) + sum(int(d) for d in str_n[2:])\n        else:\n            return sum(int(d) for d in str_n)\n    \n    return sum(1 for num in arr if digit_sum(num) > 0)\n\n# Test cases",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 109,
        "k_value": 5,
        "code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    n = len(arr)\n    \n    # Count the number of places where the next element is less than the current one\n    count_decrease_points = 0\n    for i in range(1, n):\n        if arr[i] < arr[i - 1]:\n            count_decrease_points += 1\n    \n    # If there is more than one such point, then we cannot sort the array with any shift\n    if count_decrease_points > 1:\n        return False\n    \n    # If there is exactly one decrease point, verify if we can shift it\n    if count_decrease_points == 1:\n        # Find the index where the decrease happens\n        for i in range(1, n):\n            if arr[i] < arr[i - 1]:\n                # Check if the part after the decrease point is smaller than the first part\n                return arr[n - 1] <= arr[0]\n    \n    # If no decrease point is found, array is already sorted\n    return True",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 110,
        "k_value": 5,
        "code": "def exchange(lst1, lst2):\n    # Find the number of odd numbers in lst1\n    odd_count_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    \n    # Find the number of even numbers in lst2\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    \n    # If there are enough even numbers in lst2 to replace all odd numbers in lst1\n    if odd_count_lst1 <= even_count_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Examples",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 111,
        "k_value": 5,
        "code": "def histogram(test):\n    \"\"\"Given a string representing a space-separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\"\"\"\n    \n    if not test:\n        return {}\n\n    # Split the test string by spaces to get individual letters\n    letters = test.split()\n    \n    # Create a dictionary to hold the counts of each letter\n    counts = {}\n    \n    # Count the occurrences of each letter\n    for letter in letters:\n        if letter in counts:\n            counts[letter] += 1\n        else:\n            counts[letter] = 1\n    \n    # Find the maximum count\n    max_count = max(counts.values())\n    \n    # Create a dictionary of letters with the maximum count\n    max_count_letters = {letter: count for letter, count in counts.items() if count == max_count}\n    \n    return max_count_letters",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 112,
        "k_value": 5,
        "code": "def reverse_delete(s, c):\n    # Remove all characters from s that are in c\n    result = ''.join(char for char in s if char not in c)\n    \n    # Check if the resulting string is a palindrome\n    is_palindrome = result == result[::-1]\n    \n    # Return the result as a tuple\n    return (result, is_palindrome)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 113,
        "k_value": 5,
        "code": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        output_str = f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\"\n        result.append(output_str)\n    return result",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 114,
        "k_value": 5,
        "code": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return None  # Edge case if the list is empty\n\n    # Initialize variables\n    current_min = nums[0]\n    global_min = nums[0]\n\n    # Iterate through the array\n    for num in nums[1:]:\n        # Update current_min to be the minimum sum including the current number\n        current_min = min(current_min + num, num)\n        # Update global_min if current_min is smaller\n        global_min = min(global_min, current_min)\n\n    return global_min",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 115,
        "k_value": 5,
        "code": "def max_fill(grid, capacity):\n    import math\n    \n    bucket_uses = 0\n    \n    for row in grid:\n        water_units = sum(row)  # Count the number of 1s in the row\n        # Calculate the number of times we need to lower the bucket for this row\n        bucket_uses += math.ceil(water_units / capacity)\n    \n    return bucket_uses",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 116,
        "k_value": 5,
        "code": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    the number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    \"\"\"\n    # Sort the array based on the number of 1's in the binary representation,\n    # and then by the number itself for equal number of 1's.\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 117,
        "k_value": 5,
        "code": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, return a list of all words from\n    string s that contain exactly n consonants, in the order these words appear\n    in the string s.\n    \"\"\"\n    # Define a set of vowel characters\n    vowels = set(\"aeiouAEIOU\")\n    \n    # Split the string s into words\n    words = s.split()\n    \n    # Initialize an empty list to store result words\n    result = []\n\n    # Iterate over each word in the list\n    for word in words:\n        # Count the consonants in the word\n        consonant_count = sum(1 for char in word if char.isalpha() and char not in vowels)\n        \n        # If the consonant count matches n, add the word to the result list\n        if consonant_count == n:\n            result.append(word)\n    \n    return result",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 118,
        "k_value": 5,
        "code": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n    \"\"\"\n    vowels = \"AEIOUaeiou\"\n    \n    # Initialize the last consonant index\n    last_consonant_index = -1\n\n    # Start from the end of the word and move backwards\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] not in vowels:\n            if last_consonant_index != -1:\n                # If we find a consonant again with a vowel in between\n                if last_consonant_index - i == 2:\n                    return word[i + 1]\n            last_consonant_index = i\n    \n    # No vowel found between two consonants\n    return \"\"\n\n# Examples",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 119,
        "k_value": 5,
        "code": "def match_parens(lst):\n    # Verify input is a list of exactly two strings\n    if not isinstance(lst, list) or len(lst) != 2 or not all(isinstance(s, str) for s in lst):\n        return 'No'\n\n    # Helper function to check if a string of parentheses is balanced\n    def is_balanced(s):\n        counter = 0\n        for char in s:\n            if char == '(':\n                counter += 1\n            elif char == ')':\n                counter -= 1\n            # If counter is negative, string is not balanced\n            if counter < 0:\n                return False\n        # String is balanced if counter is zero at the end\n        return counter == 0\n\n    # All possible concatenations of the two strings\n    concat1 = lst[0] + lst[1]\n    concat2 = lst[1] + lst[0]\n\n    # Check if either concatenated result is balanced\n    if is_balanced(concat1) or is_balanced(concat2):\n        return 'Yes'\n    \n    return 'No'",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 120,
        "k_value": 5,
        "code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    # Sort the array in descending order to bring the largest elements to the front\n    sorted_arr = sorted(arr, reverse=True)\n\n    # Select the first k elements from the sorted array\n    max_k_elements = sorted_arr[:k]\n\n    # Sort the selected elements in ascending order before returning\n    return sorted(max_k_elements)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 121,
        "k_value": 5,
        "code": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\"\"\"\n    return sum(elem for idx, elem in enumerate(lst) if idx % 2 == 0 and elem % 2 != 0)\n\n# Test examples",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 122,
        "k_value": 5,
        "code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x for x in arr[:k] if -99 <= x <= 99)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 123,
        "k_value": 5,
        "code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    odd_numbers = set()\n\n    while n != 1:\n        if n % 2 == 1:\n            odd_numbers.add(n)\n        n = 3 * n + 1 if n % 2 == 1 else n // 2\n\n    odd_numbers.add(1)  # Ensure 1 is included, as the sequence always ends at 1.\n    \n    return sorted(odd_numbers)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 124,
        "k_value": 5,
        "code": "def valid_date(date):\n    \"\"\"Validate a given date string and return True if the date is valid, otherwise False.\"\"\"\n    \n    if not date:\n        return False\n\n    # Split the date string\n    parts = date.split(\"-\")\n    \n    # Check if the date is in correct format (mm-dd-yyyy)\n    if len(parts) != 3:\n        return False\n    \n    try:\n        month, day, year = map(int, parts)\n    except ValueError:\n        return False\n\n    # Check month validity\n    if month < 1 or month > 12:\n        return False\n    \n    # Check days in month\n    if month in {1, 3, 5, 7, 8, 10, 12}:\n        if day < 1 or day > 31:\n            return False\n    elif month in {4, 6, 9, 11}:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\n    return True",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 125,
        "k_value": 5,
        "code": "def split_words(txt):\n    # Check if the input string contains any whitespace characters\n    if any(c.isspace() for c in txt):\n        # Split the string on whitespace\n        return txt.split()\n    \n    # Check if the input string contains any commas\n    if ',' in txt:\n        # Split the string on commas\n        return txt.split(',')\n    \n    # Initialize a count to zero\n    count = 0\n    \n    # Iterate over each character in the string\n    for char in txt:\n        if 'a' <= char <= 'z':  # Check if the character is a lowercase letter\n            # Convert the character to its corresponding order in the alphabet\n            order = ord(char) - ord('a')\n            # Check if the order is odd\n            if order % 2 == 1:\n                # Increment the count\n                count += 1\n    \n    # Return the final count of characters with odd orders in the alphabet\n    return count",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 126,
        "k_value": 5,
        "code": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n    '''\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst.count(lst[i]) > 2:\n            return False\n    return True",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 127,
        "k_value": 5,
        "code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Extract the start and end values from the two intervals\n    interval1_start, interval1_end = interval1\n    interval2_start, interval2_end = interval2\n\n    # Calculate the intersection of the two intervals\n    intersection_start = max(interval1_start, interval2_start)\n    intersection_end = min(interval1_end, interval2_end)\n\n    # Check if the intersection is valid\n    if intersection_start > intersection_end:\n        return \"NO\"\n\n    # Calculate the length of the intersection\n    intersection_length = intersection_end - intersection_start\n\n    # Determine if the length of the intersection is a prime number\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 128,
        "k_value": 5,
        "code": "def prod_signs(arr):\n    if not arr:\n        return None\n\n    sum_magnitudes = sum(abs(x) for x in arr)\n    product_of_signs = 1\n\n    for num in arr:\n        if num == 0:\n            product_of_signs = 0\n            break\n        elif num < 0:\n            product_of_signs *= -1\n\n    return sum_magnitudes * product_of_signs",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 129,
        "k_value": 5,
        "code": "def minPath(grid, k):\n    from heapq import heappush, heappop\n\n    # Get the size of the grid\n    n = len(grid)\n    \n    # Directions for moving up, down, left, right\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    # Min-heap to store (path value list, current_row, current_col)\n    heap = []\n\n    # Initialize heap with starting paths from each cell in the grid\n    for i in range(n):\n        for j in range(n):\n            heappush(heap, ([grid[i][j]], i, j))\n    \n    # Explore paths\n    while heap:\n        path, r, c = heappop(heap)\n        \n        # If the path length is k, return it\n        if len(path) == k:\n            return path\n        \n        # Continue the path by moving in each possible direction\n        for dr, dc in directions:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < n and 0 <= nc < n:\n                new_path = path + [grid[nr][nc]]\n                heappush(heap, (new_path, nr, nc))\n\n# Example usage:\n# grid1 = [ [1,2,3], [4,5,6], [7,8,9]]\n# print(minPath(grid1, 3)) # Output: [1, 2, 1]\n\n# grid2 = [ [5,9,3], [4,1,6], [7,8,2]]\n# print(minPath(grid2, 1)) # Output: [1]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 130,
        "k_value": 5,
        "code": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"The input must be a non-negative integer.\")\n\n    # Initialize the tribonacci list\n    tribonacci = [0] * (n + 1)\n\n    # Define base cases\n    if n >= 0:\n        tribonacci[0] = 1\n    if n >= 1:\n        tribonacci[1] = 3\n    \n    # Calculate the sequence\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci[i] = 1 + i / 2\n        else:\n            tribonacci[i] = tribonacci[i - 1] + tribonacci[i - 2] + (1 + (i + 1) / 2)\n    \n    return tribonacci\n\n# Test cases",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 131,
        "k_value": 5,
        "code": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    has_odd = False\n    \n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n        n //= 10\n    \n    return product if has_odd else 0",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 132,
        "k_value": 5,
        "code": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') ➞ True\n    is_nested('[]]]]]]][[[[[]') ➞ False\n    is_nested('[][]') ➞ False\n    is_nested('[]') ➞ False\n    is_nested('[[][]]') ➞ True\n    is_nested('[[]][[') ➞ True\n    '''\n    # Step 1: Initialize a counter\n    counter = 0\n    \n    # Step 2: Iterate over each character in the string\n    for char in string:\n        # Step 3: Check for opening bracket '['\n        if char == '[':\n            counter += 1\n        # Step 4: Check for closing bracket ']'\n        elif char == ']':\n            if counter > 1:\n                # Nested bracket found\n                return True\n            counter -= 1\n    \n    # Step 7: If loop completes without finding nested brackets\n    return False",
        "passed": false,
        "error_type": "AssertionError",
        "error_info": ""
    },
    {
        "sample_id": 133,
        "k_value": 5,
        "code": "import math\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int (Ceiling) first.\n    \"\"\"\n    return sum(math.ceil(x) ** 2 for x in lst)\n\n# Examples:\n# For lst = [1, 2, 3] the output should be 14\n# For lst = [1, 4, 9] the output should be 98\n# For lst = [1, 3, 5, 7] the output should be 84\n# For lst = [1.4, 4.2, 0] the output should be 29\n# For lst = [-2.4, 1, 1] the output should be 6",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 134,
        "k_value": 5,
        "code": "def check_if_last_char_is_a_letter(txt):\n    # Step 1: Check for Empty String\n    if not txt:\n        return False\n\n    # Step 2: Trim Trailing Whitespace\n    txt = txt.rstrip()\n\n    # Step 3: Re-evaluate String Length\n    if not txt:\n        return False\n\n    # Step 4: Check Last Character\n    last_char = txt[-1]\n\n    # Step 5: Check If Last Character Is Alphabetic\n    if not last_char.isalpha():\n        return False\n\n    # Step 6: Check If Last Character Is Part of a Word\n    words = txt.split()\n\n    # Step 7: Verify Last Character's Context\n    if last_char in words[-1] and len(words[-1]) > 1:\n        return False\n\n    # Step 8: Return True\n    return True",
        "passed": false,
        "error_type": "AssertionError",
        "error_info": ""
    },
    {
        "sample_id": 135,
        "k_value": 5,
        "code": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 136,
        "k_value": 5,
        "code": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n    '''\n    largest_negative = None\n    smallest_positive = None\n    \n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    \n    return (largest_negative, smallest_positive)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 137,
        "k_value": 5,
        "code": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) ➞ 2.5\n    compare_one(1, \"2,3\") ➞ \"2,3\"\n    compare_one(\"5,1\", \"6\") ➞ \"6\"\n    compare_one(\"1\", 1) ➞ None\n    \"\"\"\n\n    def convert(value):\n        # Try to convert string representations to floats\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n            try:\n                return float(value)\n            except ValueError:\n                pass\n        return value\n\n    a_converted = convert(a)\n    b_converted = convert(b)\n\n    if a_converted == b_converted:\n        return None\n    elif a_converted < b_converted:\n        return b\n    else:\n        return a",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 138,
        "k_value": 5,
        "code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    # A number can be expressed as the sum of 4 even numbers if it's at least 8 and even.\n    return n >= 8 and n % 2 == 0",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 139,
        "k_value": 5,
        "code": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n    \"\"\"\n    import math\n    result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result\n\n# Example:\n# special_factorial(4) should return 288\n# Calculation: 4! * 3! * 2! * 1! = 24 * 6 * 2 * 1 = 288",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 140,
        "k_value": 5,
        "code": "import re\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with a hyphen \"-\".\n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    # Step 3: Replace three or more consecutive spaces with '-'\n    text = re.sub(r'\\s{3,}', '-', text)\n    \n    # Step 4: Replace single spaces with '_'\n    text = text.replace(' ', '_')\n    \n    # Return the modified string\n    return text",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 141,
        "k_value": 5,
        "code": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the file's name is valid, and returns 'No' otherwise.\n    \"\"\"\n\n    # Check if there's exactly one dot in the file name\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into the name and the extension\n    name_part, extension = file_name.split('.')\n\n    # Check if extension is valid\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    # Check if name part is not empty and starts with a letter\n    if not name_part or not name_part[0].isalpha():\n        return 'No'\n\n    # Count digits in the name part\n    digit_count = sum(char.isdigit() for char in name_part)\n\n    # Check if the number of digits in the file name is not more than three\n    if digit_count > 3:\n        return 'No'\n\n    # If all checks have passed, the file name is valid\n    return 'Yes'\n\n# Examples",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 142,
        "k_value": 5,
        "code": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    total = 0\n    for i, val in enumerate(lst):\n        if i % 3 == 0:\n            total += val ** 2\n        elif i % 4 == 0:\n            total += val ** 3\n        else:\n            total += val\n    return total",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 143,
        "k_value": 5,
        "code": "def is_prime(n):\n    \"\"\"Helper function to check if a number is a prime.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n    \"\"\"\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)\n\n# Example usage:\n# print(words_in_sentence(\"This is a test\"))  # Should output: \"is\"\n# print(words_in_sentence(\"lets go for swimming\"))  # Should output: \"go for\"",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 144,
        "k_value": 5,
        "code": "def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n\n    def parse_fraction(fraction):\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator, denominator\n\n    num1, denom1 = parse_fraction(x)\n    num2, denom2 = parse_fraction(n)\n\n    numerator = num1 * num2\n    denominator = denom1 * denom2\n\n    return numerator % denominator == 0",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 145,
        "k_value": 5,
        "code": "def order_by_points(nums):\n    def sum_of_digits(n):\n        # Convert the number to a string, remove '-' if negative, then calculate sum of its digits\n        return sum(int(digit) for digit in str(abs(n)))\n    \n    # Step 2: Create tuples of (sum_of_digits, index, value)\n    indexed_nums = [(sum_of_digits(num), index, num) for index, num in enumerate(nums)]\n    \n    # Step 3: Sort based on sum of digits, and index to maintain order for ties\n    indexed_nums.sort()\n    \n    # Step 4: Extract sorted values based on the tuples\n    sorted_nums = [num[2] for num in indexed_nums]\n    \n    # Step 5: Return the sorted list\n    return sorted_nums",
        "passed": false,
        "error_type": "AssertionError",
        "error_info": ""
    },
    {
        "sample_id": 146,
        "k_value": 5,
        "code": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    \"\"\"\n    count = 0\n\n    for num in nums:\n        # Use absolute value to handle negative numbers\n        abs_num = abs(num)\n\n        # Convert number to string to easily access first and last digits\n        num_str = str(abs_num)\n\n        # Check if first and last digits are odd\n        first_digit = int(num_str[0])\n        last_digit = int(num_str[-1])\n\n        if num > 10 and first_digit % 2 != 0 and last_digit % 2 != 0:\n            count += 1\n\n    return count",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 147,
        "k_value": 5,
        "code": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n    For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n    Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    count = 0\n    \n    # We'll use combinations to iterate over all possible triples (i, j, k) with i < j < k\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 148,
        "k_value": 5,
        "code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n\n    if index1 > index2:\n        index1, index2 = index2, index1\n\n    return tuple(planets[index1+1:index2])",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 149,
        "k_value": 5,
        "code": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order.\n    The order of the list should be ascending by the length of each word, and if two words\n    have the same length, they should be sorted alphabetically.\n    \"\"\"\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort the list first by length, then alphabetically\n    even_length_strings.sort(key=lambda x: (len(x), x))\n    \n    return even_length_strings\n\n# Example usage",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 150,
        "k_value": 5,
        "code": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    \n    return x if is_prime(n) else y",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 151,
        "k_value": 5,
        "code": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\n   \n    If the input list is empty, return 0.\n    '''\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 152,
        "k_value": 5,
        "code": "def compare(game, guess):\n    \"\"\"\n    Determines how far off each guess is from the actual game results.\n    Returns an array where 0 denotes a correct guess, and any other value\n    denotes the absolute difference between the guess and the score.\n    \n    Arguments:\n    game -- List of actual scores.\n    guess -- List of guessed scores.\n\n    Returns:\n    List of differences between each guess and the actual score.\n    \"\"\"\n    return [abs(g - gs) for g, gs in zip(game, guess)]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 153,
        "k_value": 5,
        "code": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    \"\"\"\n    def extension_strength(extension):\n        caps = sum(1 for char in extension if char.isupper())\n        smalls = sum(1 for char in extension if char.islower())\n        return caps - smalls\n\n    strongest_extension = max(extensions, key=extension_strength)\n    \n    return f\"{class_name}.{strongest_extension}\"",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 154,
        "k_value": 5,
        "code": "def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\"\"\"\n\n    # Function that generates all rotations of a given string\n    def get_rotations(s):\n        return [s[i:] + s[:i] for i in range(len(s))]\n\n    # Get all rotations of the second word\n    rotations = get_rotations(b)\n    \n    # Check if any of the rotations is a substring of the first word\n    for rotation in rotations:\n        if rotation in a:\n            return True\n    return False\n\n# Test cases",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 155,
        "k_value": 5,
        "code": "def even_odd_count(num):\n    \"\"\"Given an integer, return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # Step 1: Initialize counters\n    even_count = 0\n    odd_count = 0\n    \n    # Step 2: Convert the input number to its absolute value\n    num = abs(num)\n    \n    # Step 3: Convert the number to a string\n    num_str = str(num)\n    \n    # Step 4: Iterate over each character in the string\n    for digit_char in num_str:\n        # Step 5: Convert character to integer\n        digit = int(digit_char)\n        \n        # Step 6: Check if the digit is even\n        if digit % 2 == 0:\n            # Step 6a: Increment the even counter\n            even_count += 1\n        else:\n            # Step 7: Increment the odd counter\n            odd_count += 1\n    \n    # Step 8: Return a tuple of even and odd counters\n    return (even_count, odd_count)\n\n# Example usage:\n# print(even_odd_count(-12))  # Output: (1, 1)\n# print(even_odd_count(123))  # Output: (1, 2)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 156,
        "k_value": 5,
        "code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numerals = [\n        (1000, \"M\"), (900, \"CM\"), (500, \"D\"), (400, \"CD\"),\n        (100, \"C\"), (90, \"XC\"), (50, \"L\"), (40, \"XL\"),\n        (10, \"X\"), (9, \"IX\"), (5, \"V\"), (4, \"IV\"),\n        (1, \"I\")\n    ]\n    \n    result = []\n\n    for value, numeral in roman_numerals:\n        while number >= value:\n            result.append(numeral)\n            number -= value\n\n    return ''.join(result).lower()",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 157,
        "k_value": 5,
        "code": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Sort the sides to ensure we always compare the largest one\n    sides = sorted([a, b, c])\n    # Check the Pythagorean theorem: a^2 + b^2 = c^2 \n    return sides[0]**2 + sides[1]**2 == sides[2]**2",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 158,
        "k_value": 5,
        "code": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n    \n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\"\n    \"\"\"\n    \n    # Initialize variables to keep track of the max number of unique characters\n    max_unique_count = 0\n    max_unique_word = \"\"\n\n    for word in words:\n        unique_chars = set(word)  # Get unique characters in the word\n        unique_count = len(unique_chars)\n\n        # Check if this word has more unique characters\n        # or it has the same number but comes lexicographically first\n        if (unique_count > max_unique_count) or (unique_count == max_unique_count and word < max_unique_word):\n            max_unique_count = unique_count\n            max_unique_word = word\n\n    return max_unique_word",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 159,
        "k_value": 5,
        "code": "def eat(number, need, remaining):\n    # Calculate the total number of carrots after eating\n    if remaining >= need:\n        total_eaten = number + need\n        left_over = remaining - need\n    else:\n        total_eaten = number + remaining\n        left_over = 0\n    \n    return [total_eaten, left_over]\n\n# Example usage:\n# print(eat(5, 6, 10))  # Output: [11, 4]\n# print(eat(4, 8, 9))   # Output: [12, 1]\n# print(eat(1, 10, 10)) # Output: [11, 0]\n# print(eat(2, 11, 5))  # Output: [7, 0]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 160,
        "k_value": 5,
        "code": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebraic \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of the operator list is equal to the length of the operand list minus one.\n        Operand is a list of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n    \"\"\"\n\n    # Step 1: Validate the input\n    if len(operator) != len(operand) - 1:\n        raise ValueError(\"The number of operators must be one less than the number of operands.\")\n\n    # Step 2: Initialize a variable to build the algebraic expression\n    expression = str(operand[0])\n\n    # Step 3: Iterate over the operators list\n    for i, op in enumerate(operator):\n        # Step 4: Append the operator and the corresponding operand\n        expression += f\" {op} {operand[i + 1]}\"\n\n    # Step 5: Evaluate the constructed expression string\n    try:\n        # Note: In a real-world application, eval should be used with caution as it can execute arbitrary code.\n        result = eval(expression)\n    except Exception as e:\n        raise ValueError(\"Error evaluating expression\") from e\n\n    # Step 6: Return the evaluated result\n    return result",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 161,
        "k_value": 5,
        "code": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vice versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    if any(char.isalpha() for char in s):\n        return ''.join(char.swapcase() if char.isalpha() else char for char in s)\n    else:\n        return s[::-1]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 162,
        "k_value": 5,
        "code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    md5_hash = hashlib.md5(text.encode())\n    return md5_hash.hexdigest()",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 163,
        "k_value": 5,
        "code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    # Step 1: Validate input\n    if not isinstance(a, int) or not isinstance(b, int) or a <= 0 or b <= 0:\n        raise ValueError(\"Both a and b must be positive integers.\")\n    \n    # Step 2: Determine start and end points\n    start = min(a, b)\n    end = max(a, b)\n    \n    # Step 3: Create a list to store even digits\n    even_digits = []\n    \n    # Step 4: Iterate through the range from start to end (inclusive)\n    for number in range(start, end + 1):\n        # Step 5: Check if each number is an even digit\n        if number in {2, 4, 6, 8}:\n            # Step 6: If a number is an even digit, append it to the list\n            even_digits.append(number)\n    \n    # Step 7: Return the list of even digits\n    return even_digits",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    }
]