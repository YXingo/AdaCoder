[
    {
        "sample_id": 0,
        "k_value": 5,
        "code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    # Sort the list of numbers\n    numbers.sort()\n    \n    # Check the difference between each subsequent pair in the sorted list\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n            \n    return False",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 1,
        "k_value": 5,
        "code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    temp = \"\"\n    \n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            temp += char\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n                temp += char\n                if not stack:\n                    result.append(temp)\n                    temp = \"\"\n            else:\n                temp = \"\"\n    \n    return result",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 2,
        "k_value": 5,
        "code": "def truncate_number(number: float) -> float:\n    return number - int(number)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 3,
        "k_value": 5,
        "code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    \n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    \n    return False",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 4,
        "k_value": 5,
        "code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    if not numbers:\n        return 0.0\n    \n    # Calculate the mean\n    mean_value = sum(numbers) / len(numbers)\n    \n    # Calculate the mean absolute deviation\n    mad = sum(abs(x - mean_value) for x in numbers) / len(numbers)\n    \n    return mad",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 5,
        "k_value": 5,
        "code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers`\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    \n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:  # Avoid adding delimiter after the last element\n            result.append(delimeter)\n    \n    return result",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 6,
        "k_value": 5,
        "code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    \n    def max_depth(group: str) -> int:\n        depth = 0\n        max_depth = 0\n        \n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        \n        return max_depth\n    \n    groups = paren_string.split()\n    return [max_depth(group) for group in groups]\n\n# Example usage",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 7,
        "k_value": 5,
        "code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 8,
        "k_value": 5,
        "code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return 0, 1\n\n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n\n    return total_sum, total_product",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 9,
        "k_value": 5,
        "code": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n        return []\n\n    result = []\n    current_max = numbers[0]\n    for number in numbers:\n        current_max = max(current_max, number)\n        result.append(current_max)\n\n    return result",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 10,
        "k_value": 5,
        "code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if string == '':\n        return ''\n    \n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 11,
        "k_value": 5,
        "code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(char_a) ^ int(char_b)) for char_a, char_b in zip(a, b))",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 12,
        "k_value": 5,
        "code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n    None\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n        \n    longest_string = strings[0]\n    \n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n            \n    return longest_string",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 13,
        "k_value": 5,
        "code": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return abs(a)  # GCD is always non-negative",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 14,
        "k_value": 5,
        "code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string) + 1)]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 15,
        "k_value": 5,
        "code": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 up to n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n + 1))",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 16,
        "k_value": 5,
        "code": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    unique_chars = set(string.lower())\n    distinct_count = len(unique_chars)\n    return distinct_count\n\n# Test cases",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 17,
        "k_value": 5,
        "code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats_duration = {'o': 4, 'o|': 2, '.|': 1}\n    music_notes = music_string.split()\n    return [beats_duration.get(note, 0) for note in music_notes]\n\n# Test the function with example input\nresult = parse_music('o o| .| o| o| .| .| .| .| o o')",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 18,
        "k_value": 5,
        "code": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlapping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    start = 0\n\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1  # Move to the next index to allow for overlapping\n\n    return count",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 19,
        "k_value": 5,
        "code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest.\n    \n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    # Dictionary to map word numbers to their corresponding values\n    num_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Split the input string into a list of words\n    number_words = numbers.split()\n    \n    # Sort the list of words based on their mapped numeric values\n    sorted_words = sorted(number_words, key=lambda word: num_map[word])\n    \n    # Join the sorted list back into a space-delimited string\n    return ' '.join(sorted_words)\n\n# Example usage:\n# print(sort_numbers('three one five'))  # Output: 'one three five'",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 20,
        "k_value": 5,
        "code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = (0.0, 0.0)\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result\n\n\n# Test cases",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 21,
        "k_value": 5,
        "code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    \n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    \n    return [(x - min_num) / (max_num - min_num) for x in numbers]\n\n# Test the function",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 22,
        "k_value": 5,
        "code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 23,
        "k_value": 5,
        "code": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 24,
        "k_value": 5,
        "code": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1  # In case n is 1, the only divisor is itself; return 1.",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 25,
        "k_value": 5,
        "code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    # Check for number of 2s that divide n\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    \n    # Check for odd factors from 3 to sqrt(n)\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n            \n    # This condition is to check if n is a prime number greater than 2\n    if n > 2:\n        factors.append(n)\n    \n    return factors",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 26,
        "k_value": 5,
        "code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    unique_numbers = []\n    for number in numbers:\n        if numbers.count(number) == 1:\n            unique_numbers.append(number)\n    return unique_numbers\n\n# Test the function",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 27,
        "k_value": 5,
        "code": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 28,
        "k_value": 5,
        "code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 29,
        "k_value": 5,
        "code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 30,
        "k_value": 5,
        "code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    \n    return [num for num in l if num > 0]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 31,
        "k_value": 5,
        "code": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 32,
        "k_value": 5,
        "code": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    # Bisection method implementation\n    low = -100  # Assume a reasonable lower bound\n    high = 100  # Assume a reasonable upper bound\n    tolerance = 1e-7\n    max_iterations = 1000  # Limit iterations to prevent infinite loops\n\n    for _ in range(max_iterations):\n        mid = (low + high) / 2\n        f_mid = poly(xs, mid)\n        \n        if abs(f_mid) < tolerance:\n            return mid  # Found a root\n        \n        if poly(xs, low) * f_mid < 0:\n            high = mid  # There is a root in the lower half\n        else:\n            low = mid  # There is a root in the upper half\n\n    raise ValueError(\"Root not found within the specified range and tolerance.\")",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 33,
        "k_value": 5,
        "code": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal\n    to the values of the corresponding indices of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    # Step 1: Create the lists to hold values\n    not_divisible_by_three = []\n    divisible_by_three = []\n\n    # Step 2: Separate the values\n    for i in range(len(l)):\n        if i % 3 == 0:\n            divisible_by_three.append(l[i])\n        else:\n            not_divisible_by_three.append(l[i])\n    \n    # Step 3: Sort the list with values at indices divisible by three\n    divisible_by_three.sort()\n\n    # Step 4: Merge the two lists back together\n    result = []\n    div_index = 0  # index for sorted values\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result.append(divisible_by_three[div_index])  # append sorted value\n            div_index += 1\n        else:\n            result.append(not_divisible_by_three.pop(0))  # append original value\n\n    return result\n\n# Example usage",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 34,
        "k_value": 5,
        "code": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(set(l))\n    \n# Test the function",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 35,
        "k_value": 5,
        "code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if not l:\n        raise ValueError(\"The list is empty\")\n    max_val = l[0]\n    for num in l:\n        if num > max_val:\n            max_val = num\n    return max_val",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 36,
        "k_value": 5,
        "code": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0):\n            count += str(i).count('7')\n    return count",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 37,
        "k_value": 5,
        "code": "def sort_even(l: list):\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = [l[i] for i in even_indices]\n    sorted_even_values = sorted(even_values)\n    result = l.copy()\n    for idx, val in zip(even_indices, sorted_even_values):\n        result[idx] = val\n    return result\n\n# Test cases",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 38,
        "k_value": 5,
        "code": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # reverse the cycling process applied during encoding\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in [s[i:i+3] for i in range(0, len(s), 3)]]\n    return \"\".join(groups)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 39,
        "k_value": 5,
        "code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fib_numbers = [0, 1]\n    prime_fib_numbers = []\n    \n    while len(prime_fib_numbers) < n:\n        next_fib = fib_numbers[-1] + fib_numbers[-2]\n        fib_numbers.append(next_fib)\n        \n        if is_prime(next_fib):\n            prime_fib_numbers.append(next_fib)\n    \n    return prime_fib_numbers[-1]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 40,
        "k_value": 5,
        "code": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    n = len(l)\n    l.sort()\n\n    for i in range(n):\n        left, right = i + 1, n - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    \n    return False",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 41,
        "k_value": 5,
        "code": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right; simultaneously, a different set of n cars\n    are driving right to left. The two sets of cars start out being very far from\n    each other. All cars move at the same speed. Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    return n * n\n\n# Testing the function with various values of n, including edge cases",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 42,
        "k_value": 5,
        "code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [x + 1 for x in l]\n\n# Test cases",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 43,
        "k_value": 5,
        "code": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    seen = set()\n    for number in l:\n        if -number in seen:\n            return True\n        seen.add(number)\n    return False",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 44,
        "k_value": 5,
        "code": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    Return string representation after the conversion.\n    Base numbers are less than 10.\n\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    \n    digits = []\n    while x > 0:\n        remainder = x % base\n        digits.append(str(remainder))\n        x //= base\n        \n    # The digits are collected in reverse order\n    digits.reverse()\n    \n    return ''.join(digits)\n\n# You can add test cases to check the function's behavior",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 45,
        "k_value": 5,
        "code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 46,
        "k_value": 5,
        "code": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    # Initialize the base cases\n    fib_values = [0, 0, 2, 0]\n    \n    # Compute fib4 iteratively\n    for i in range(4, n + 1):\n        next_value = fib_values[i - 1] + fib_values[i - 2] + fib_values[i - 3] + fib_values[i - 4]\n        fib_values.append(next_value)\n    \n    return fib_values[n]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 47,
        "k_value": 5,
        "code": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\"\"\"\n    sorted_list = sorted(l)\n    length = len(sorted_list)\n    \n    if length % 2 == 0:\n        mid_right = length // 2\n        mid_left = mid_right - 1\n        median_value = (sorted_list[mid_left] + sorted_list[mid_right]) / 2\n    else:\n        mid = length // 2\n        median_value = sorted_list[mid]\n    \n    return median_value",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 48,
        "k_value": 5,
        "code": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    \n    return text == text[::-1]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 49,
        "k_value": 5,
        "code": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    result = 1\n    base = 2\n    \n    # Handle case where n is 0\n    if n == 0:\n        return result  # 2^0 is 1\n\n    while n > 0:\n        # If n is odd, multiply the current base with the result\n        if n % 2 == 1:\n            result = (result * base) % p\n        \n        # Square the base\n        base = (base * base) % p\n        # Divide n by 2\n        n //= 2\n    \n    return result",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 50,
        "k_value": 5,
        "code": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\") + 5) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 51,
        "k_value": 5,
        "code": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 52,
        "k_value": 5,
        "code": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 53,
        "k_value": 5,
        "code": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 54,
        "k_value": 5,
        "code": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    # Convert both strings to sets and compare the sets\n    return set(s0) == set(s1)\n\n# You can test the function with the provided examples or add additional test cases.",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 55,
        "k_value": 5,
        "code": "def fib(n: int):\n    if n <= 0:\n        return 0\n\n    a, b = 0, 1\n    for _ in range(n-1):\n        a, b = b, a + b\n\n    return b",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 56,
        "k_value": 5,
        "code": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    balance = 0\n    for char in brackets:\n        if char == '<':\n            balance += 1\n        elif char == '>':\n            balance -= 1\n        \n        # If balance goes negative, there are more closing than opening brackets\n        if balance < 0:\n            return False\n\n    # Finally, check if balance is zero\n    return balance == 0",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 57,
        "k_value": 5,
        "code": "def monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\"\"\"\n    \n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n\n    return increasing or decreasing",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 58,
        "k_value": 5,
        "code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Convert lists to sets to find unique elements and calculate intersection\n    common_elements = set(l1) & set(l2)\n    # Sort the results and return as a list\n    return sorted(common_elements)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 59,
        "k_value": 5,
        "code": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Initialize the largest prime factor\n    largest_factor = None\n    \n    # Check for number of 2s that divide n\n    while n % 2 == 0:\n        largest_factor = 2\n        n //= 2\n    \n    # n must be odd at this point, so we can skip even numbers\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            largest_factor = i\n            n //= i\n    \n    # This condition is to check if n is a prime number greater than 2\n    if n > 2:\n        largest_factor = n\n\n    return largest_factor",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 60,
        "k_value": 5,
        "code": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return n * (n + 1) // 2",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 61,
        "k_value": 5,
        "code": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    balance = 0\n    for char in brackets:\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        \n        # If balance goes negative, we have a closing bracket without a matching opening one\n        if balance < 0:\n            return False\n\n    # If balance is zero, all opening brackets have been matched\n    return balance == 0",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 62,
        "k_value": 5,
        "code": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    # Calculate the derivative by multiplying each coefficient with its exponent\n    return [i * xs[i] for i in range(1, len(xs))]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 63,
        "k_value": 5,
        "code": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    \n    # Initialize the first three values of the FibFib sequence\n    fibfib_values = [0, 0, 1]\n    \n    # Compute the fibfib values iteratively up to n\n    for i in range(3, n + 1):\n        next_value = fibfib_values[i - 1] + fibfib_values[i - 2] + fibfib_values[i - 3]\n        fibfib_values.append(next_value)\n    \n    return fibfib_values[n]\n\n# Example usages:\n# fibfib(1) should return 0\n# fibfib(5) should return 4\n# fibfib(8) should return 24",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 64,
        "k_value": 5,
        "code": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    >>> vowels_count(\"cry\")\n    1\n    >>> vowels_count(\"sky\")\n    0\n    >>> vowels_count(\"\")\n    0\n    >>> vowels_count(\"A\")\n    1\n    >>> vowels_count(\"X\")\n    0\n    >>> vowels_count(\"hello\")\n    2\n    >>> vowels_count(\"HELLO\")\n    2\n    >>> vowels_count(\"rhythm\")\n    0\n    >>> vowels_count(\"rhythmy\")\n    1\n    >>> vowels_count(\"AUTUMN\")\n    3\n    >>> vowels_count(\"hy\")\n    1\n    >>> vowels_count(\"hymn\")\n    0\n    >>> vowels_count(\"y\")\n    0\n    >>> vowels_count(\"y \")\n    0\n    >>> vowels_count(\"aY\")\n    1\n    >>> vowels_count(\"AY\")\n    1\n    \"\"\"\n    count = 0\n    vowels = \"aeiouAEIOU\"\n    \n    # Check for regular vowels\n    for char in s:\n        if char in vowels:\n            count += 1\n            \n    # Check 'y' at the end of the string\n    if s and s[-1].lower() == 'y':\n        count += 1\n        \n    return count",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 65,
        "k_value": 5,
        "code": "def circular_shift(x, shift):\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        shift %= len(x_str)\n        return x_str[-shift:] + x_str[:-shift]\n\n# Test examples",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 66,
        "k_value": 5,
        "code": "def digitSum(s):\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 67,
        "k_value": 5,
        "code": "import re\n\ndef fruit_distribution(s, n):\n    apples = int(re.search(r'\\d+', re.search(r'\\d+\\sapples', s).group()).group())\n    oranges = int(re.search(r'\\d+', re.search(r'\\d+\\soranges', s).group()).group())\n    mango = n - apples - oranges\n    return mango\n\n# Test cases",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 68,
        "k_value": 5,
        "code": "def pluck(arr):\n    even_values = [num for num in arr if num % 2 == 0]\n    \n    if not even_values:\n        return []\n\n    min_even_value = min(even_values)\n    min_even_index = arr.index(min_even_value)\n    \n    return [min_even_value, min_even_index]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 69,
        "k_value": 5,
        "code": "def search(lst):\n    from collections import Counter\n\n    # Count the frequency of each number in the list\n    frequency = Counter(lst)\n    \n    # Initialize a variable to keep track of the greatest integer found\n    greatest = -1\n    \n    # Check each number and its frequency\n    for num, freq in frequency.items():\n        # Check if frequency is greater than or equal to the number itself\n        if freq >= num:\n            greatest = max(greatest, num)\n    \n    return greatest",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 70,
        "k_value": 5,
        "code": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    \n    lst.sort()  # Sort the list\n    result = []\n    left, right = 0, len(lst) - 1\n    toggle = True  # True means take from left, False means take from right\n\n    while left <= right:\n        if toggle:\n            result.append(lst[left])\n            left += 1\n        else:\n            result.append(lst[right])\n            right -= 1\n        toggle = not toggle  # Alternate between left and right\n    \n    return result",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 71,
        "k_value": 5,
        "code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 72,
        "k_value": 5,
        "code": "def will_it_fly(q, w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) ➞ False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) ➞ False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) ➞ True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) ➞ True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    # Check if the list is a palindrome\n    is_balanced = q == q[::-1]\n    \n    # Calculate the sum of the elements in the list\n    total_weight = sum(q)\n    \n    # Determine if it will fly\n    return is_balanced and total_weight <= w",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 73,
        "k_value": 5,
        "code": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    changes = 0\n    \n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n            \n    return changes",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 74,
        "k_value": 5,
        "code": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) ➞ []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n    '''\n    \n    # Calculate total number of characters in lst1\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    \n    # Calculate total number of characters in lst2\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    # Compare the total number of characters and return the appropriate list\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst2 < total_chars_lst1:\n        return lst2\n    else:\n        return lst1  # return lst1 if totals are equal",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 75,
        "k_value": 5,
        "code": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    \n    # Function to determine if a number is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # List of primes less than 100\n    primes = [i for i in range(2, 100) if is_prime(i)]\n    \n    # Check combinations of primes\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                product = primes[i] * primes[j] * primes[k]\n                if product == a:\n                    return True\n                \n    return False",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 76,
        "k_value": 5,
        "code": "def is_simple_power(x, n):\n    if n <= 0:\n        return False  # n must be positive to be a base for powers\n    if n == 1:\n        return x == 1  # 1^k is only 1 for any integer k\n    \n    k = 0\n    power_value = 1  # n^0 = 1\n    \n    while power_value < x:\n        k += 1\n        power_value = n ** k\n    \n    return power_value == x",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 77,
        "k_value": 5,
        "code": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n\n    if a < 0:\n        a = -a\n\n    cube_root = round(a ** (1 / 3))\n    \n    return cube_root ** 3 == a",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 78,
        "k_value": 5,
        "code": "def hex_key(num):\n    \"\"\"Count the number of prime hexadecimal digits in a given hex string.\"\"\"\n    \n    # Define prime hex digits (as characters)\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    \n    # Initialize a count for prime digits\n    count = 0\n    \n    # Iterate over each character in the input string\n    for char in num:\n        if char in prime_hex_digits:\n            count += 1  # Increment count if char is a prime hex digit\n    \n    return count\n\n# Test cases to illustrate functionality",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 79,
        "k_value": 5,
        "code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return f\"db{binary}db\"",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 80,
        "k_value": 5,
        "code": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    # Check if the length of the string is less than 3\n    if len(s) < 3:\n        return False\n    \n    # Iterate through the string and check every 3 consecutive characters\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) < 3:\n            return False\n            \n    return True",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 81,
        "k_value": 5,
        "code": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    \n    return letter_grades",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 82,
        "k_value": 5,
        "code": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    return is_prime(len(string))\n\n# Test cases",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 83,
        "k_value": 5,
        "code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    \n    # Calculate the range for n-digit positive integers\n    start = 10 ** (n - 1)\n    end = 10 ** n\n    \n    for i in range(start, end):\n        # Convert integer to string to check the first and last character\n        str_i = str(i)\n        if str_i[0] == '1' or str_i[-1] == '1':\n            count += 1\n    \n    return count",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 84,
        "k_value": 5,
        "code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 ≤ N ≤ 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Calculate the sum of the digits of N\n    total_sum = sum(int(digit) for digit in str(N))\n    \n    # Convert the sum to binary and remove the '0b' prefix\n    binary_sum = bin(total_sum)[2:]\n    \n    return binary_sum",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 85,
        "k_value": 5,
        "code": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst, add the even elements that are at odd indices.\"\"\"\n    \n    # Using a list comprehension to get the even elements at odd indices\n    even_at_odd_indices = [num for i, num in enumerate(lst) if i % 2 != 0 and num % 2 == 0]\n    \n    # Summing up the even elements at odd indices\n    result = sum(even_at_odd_indices)\n    \n    return result\n\n# Example",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 86,
        "k_value": 5,
        "code": "def anti_shuffle(s):\n    def ordered_word(word):\n        return ''.join(sorted(word))\n\n    words = s.split()\n    ordered_words = [ordered_word(word) for word in words]\n    result = ' '.join(ordered_words)\n\n    return result",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 87,
        "k_value": 5,
        "code": "def get_row(lst, x):\n    result = []\n    for row_idx, row in enumerate(lst):\n        for col_idx, val in enumerate(row):\n            if val == x:\n                result.append((row_idx, col_idx))\n    \n    result.sort(key=lambda x: (x[0], -x[1]))\n    \n    return result",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 88,
        "k_value": 5,
        "code": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n\n    first_value = array[0]\n    last_value = array[-1]\n    total_sum = first_value + last_value\n\n    # Create a copy of the array to sort\n    sorted_array = array.copy()\n\n    if total_sum % 2 == 0:\n        # Even sum: sort in descending order\n        sorted_array.sort(reverse=True)\n    else:\n        # Odd sum: sort in ascending order\n        sorted_array.sort()\n    \n    return sorted_array",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 89,
        "k_value": 5,
        "code": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    encrypted = []\n    shift = 4  # Shift letters by 4 places\n    \n    for char in s:\n        if char.isalpha():  # Check if the character is a letter\n            # Find the base ASCII value depending on whether it's lowercase or uppercase\n            base = ord('a') if char.islower() else ord('A')\n            # Rotate character and ensure it wraps around using modulo\n            new_char = chr((ord(char) - base + shift) % 26 + base)\n            encrypted.append(new_char)\n        else:\n            encrypted.append(char)  # Keep non-alphabet characters unchanged\n    \n    return ''.join(encrypted)\n\n# Example usage",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 90,
        "k_value": 5,
        "code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    \n    unique_elements = list(set(lst))\n    unique_elements.sort()\n    \n    if len(unique_elements) < 2:\n        return None\n    else:\n        return unique_elements[1]\n\n# Test cases",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 91,
        "k_value": 5,
        "code": "def is_bored(S):\n    sentences = S.split('.') + S.split('?') + S.split('!')\n    boredom_count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            boredom_count += 1\n    return boredom_count",
        "passed": false,
        "error_type": "AssertionError",
        "error_info": "Test 2"
    },
    {
        "sample_id": 92,
        "k_value": 5,
        "code": "def any_int(x, y, z):\n    if all(isinstance(num, int) for num in (x, y, z)):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False\n\n# Test cases",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 93,
        "k_value": 5,
        "code": "def encode(message):\n    # Step 1: Create a dictionary mapping vowels to their replacements\n    vowel_replacements = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w',\n                          'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    \n    # Step 2: Initialize an empty string to store the encoded message\n    encoded_message = \"\"\n    \n    # Step 3: Iterate through each character in the input message\n    for char in message:\n        # Step 4: Process each character\n        if char.isalpha():\n            # Swap case\n            if char.isupper():\n                char = char.lower()\n            else:\n                char = char.upper()\n            # Check if vowel, if so replace with corresponding value\n            if char in vowel_replacements:\n                char = vowel_replacements[char]\n        \n        # Append modified character to the encoded message\n        encoded_message += char\n    \n    # Step 5: Return the final encoded message\n    return encoded_message\n\n# Test examples",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 94,
        "k_value": 5,
        "code": "def is_prime(n):\n    \"\"\"Check if the number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef digit_sum(n):\n    \"\"\"Calculate the sum of digits of a number.\"\"\"\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n    \"\"\"\n    largest_prime = -1\n    \n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    if largest_prime == -1:\n        return 0  # Handle case where there are no primes.\n\n    return digit_sum(largest_prime)\n\n# Example usages:",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 95,
        "k_value": 5,
        "code": "def check_dict_case(dct):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False if the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # Check if the dictionary is empty\n    if not dct:\n        return False\n\n    all_lower = True\n    all_upper = True\n\n    for key in dct.keys():\n        if not isinstance(key, str):  # Check if the key is a string\n            all_lower = False\n            all_upper = False\n            break\n        if not key.islower():  # Check if the key is lower case\n            all_lower = False\n        if not key.isupper():  # Check if the key is upper case\n            all_upper = False\n\n    return all_lower or all_upper",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 96,
        "k_value": 5,
        "code": "def count_up_to(n):\n    \"\"\"Implement a function that takes a non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\"\"\"\n    \n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    \n    return primes",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 97,
        "k_value": 5,
        "code": "def multiply(a, b):\n    return int(str(abs(a) % 10)) * int(str(abs(b) % 10))",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 98,
        "k_value": 5,
        "code": "def count_upper(s):\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count\n\n# Test examples",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 99,
        "k_value": 5,
        "code": "def closest_integer(value):\n    value = float(value)\n    if value - int(value) >= 0.5:\n        return int(value) + 1\n    elif value - int(value) <= -0.5:\n        return int(value) - 1\n    else:\n        if value < 0:\n            return int(value) - 1\n        else:\n            return int(value)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 100,
        "k_value": 5,
        "code": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    >>> make_a_pile(4)\n    [4, 6, 8, 10]\n    \"\"\"\n    \n    result = []\n    current_stones = n\n    \n    for i in range(n):\n        result.append(current_stones)\n        # Determine the next stone count based on whether current_stones is odd or even\n        if current_stones % 2 == 0:  # even\n            current_stones += 2\n        else:  # odd\n            current_stones += 2\n    \n    return result",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 101,
        "k_value": 5,
        "code": "def words_string(s):\n    words = s.replace(',', ' ').split()\n    return words",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 102,
        "k_value": 5,
        "code": "def choose_num(x, y):\n    largest_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > largest_even:\n            largest_even = num\n    return largest_even",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 103,
        "k_value": 5,
        "code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    average = round(sum(range(n, m+1)) / (m - n + 1))\n    return bin(average)\n\n# Test cases",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 104,
        "k_value": 5,
        "code": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    def has_even_digits(n):\n        return any(int(d) % 2 == 0 for d in str(n))\n\n    # Filter numbers without even digits and sort them\n    result = [num for num in x if not has_even_digits(num)]\n    \n    return sorted(result)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 105,
        "k_value": 5,
        "code": "def by_length(arr):\n    digits_to_words = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n\n    valid_digits = [num for num in arr if 1 <= num <= 9]\n    sorted_valid_digits = sorted(valid_digits)\n    reversed_sorted_valid_digits = sorted_valid_digits[::-1]\n    result = [digits_to_words[num] for num in reversed_sorted_valid_digits]\n\n    return result",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 106,
        "k_value": 5,
        "code": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 107,
        "k_value": 5,
        "code": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:  # Check if the number is a palindrome\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 108,
        "k_value": 5,
        "code": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    \n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    \n    def sum_of_digits(num):\n        # Handle the case for negative numbers\n        if num < 0:\n            # Get the absolute value of num for digit processing\n            num_str = str(abs(num))\n            return -int(num_str[0]) + sum(int(digit) for digit in num_str[1:])\n        return sum(int(digit) for digit in str(num))\n\n    count = 0\n    for number in arr:\n        if sum_of_digits(number) > 0:\n            count += 1\n            \n    return count\n\n# Example usage\n# print(count_nums([]))           # 0\n# print(count_nums([-1, 11, -11])) # 1\n# print(count_nums([1, 1, 2]))     # 3",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 109,
        "k_value": 5,
        "code": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n    \"\"\"\n    if not arr:  # If the array is empty, return True\n        return True\n    \n    n = len(arr)\n    count_breaks = 0  # Count number of breaks in sorted order\n\n    for i in range(n):\n        # Check if current element is greater than the next element (circularly)\n        if arr[i] > arr[(i + 1) % n]:\n            count_breaks += 1\n            \n    # If there are 0 breaks or exactly 1 break, return True\n    return count_breaks <= 1",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 110,
        "k_value": 5,
        "code": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # Count the odd numbers in lst1\n    odd_count_in_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    \n    # Count the even numbers in lst2\n    even_count_in_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    \n    # To make lst1 all even, we can perform the following checks:\n    # if we have enough even numbers in lst2 to replace all odd numbers in lst1\n    if odd_count_in_lst1 <= even_count_in_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 111,
        "k_value": 5,
        "code": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Step 1: Split the input string into a list of lowercase letters\n    letters = test.split()\n    \n    # Step 2: Create an empty dictionary to store the count of each letter\n    letter_count = {}\n    \n    # Step 3: Iterate through the list of letters and count occurrences\n    for letter in letters:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n\n    # Step 4: Find the maximum occurrence count in the dictionary\n    if not letter_count:  # Handle empty input case\n        return {}\n    \n    max_count = max(letter_count.values())\n\n    # Step 5: Create a new dictionary to store letters with the maximum occurrence count\n    max_letters = {}\n\n    # Step 6: Iterate through the initial dictionary and add max count letters to new dict\n    for letter, count in letter_count.items():\n        if count == max_count:\n            max_letters[letter] = count\n\n    # Step 7: Return the new dictionary\n    return max_letters",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 112,
        "k_value": 5,
        "code": "def reverse_delete(s, c):\n    # Remove characters from s that are in c\n    result = ''.join([char for char in s if char not in c])\n    \n    # Check if the result is a palindrome\n    is_palindrome = result == result[::-1]\n    \n    # Return the result and the palindrome flag\n    return (result, is_palindrome)\n\n# Example usage:",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 113,
        "k_value": 5,
        "code": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    result = []\n    for s in lst:\n        odd_count = 0\n        for char in s:\n            if char in '13579':  # Checking if the character is an odd digit\n                odd_count += 1\n        # Constructing the output string\n        formatted_string = f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\"\n        result.append(formatted_string)\n    return result",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 114,
        "k_value": 5,
        "code": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0  # Handle case of empty input if needed (not specified in the prompt)\n    \n    current_min = float('inf')  # Initialize current minimum\n    min_sum = float('inf')       # Overall minimum sum\n\n    for num in nums:\n        # Update current minimum sum by considering the current number\n        current_min = min(num, current_min + num)\n        # Update overall minimum sum\n        min_sum = min(min_sum, current_min)\n\n    return min_sum",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 115,
        "k_value": 5,
        "code": "def max_fill(grid, capacity):\n    total_drops = 0\n\n    for row in grid:\n        total_water = sum(row)\n        full_buckets = total_water // capacity\n        extra_water = total_water % capacity\n\n        if extra_water > 0:\n            total_drops += 1\n        \n        total_drops += full_buckets\n    \n    return total_drops",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 116,
        "k_value": 5,
        "code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 117,
        "k_value": 5,
        "code": "def select_words(s, n):\n    def count_consonants(word):\n        consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n        return sum(1 for letter in word if letter in consonants)\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n\n    return result\n\n# Test cases",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 118,
        "k_value": 5,
        "code": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending don't count. Return empty string if you didn't\n    find any vowel that meets the above condition. \n\n    You may assume that the given string contains English letters only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    n = len(word)\n    \n    # Start from the end of the word\n    for i in range(n - 2, 0, -1):  # Stop at index 1 to avoid first and last character\n        if word[i] in vowels:  # Check if current character is a vowel\n            # Check previous character to see if it's a consonant\n            if word[i - 1].isalpha() and word[i - 1] not in vowels:\n                # Check next character to see if it's a consonant\n                if word[i + 1].isalpha() and word[i + 1] not in vowels:\n                    return word[i]  # Return the closest vowel found\n    return \"\"  # Return empty string if no conditions met",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 119,
        "k_value": 5,
        "code": "def match_parens(lst):\n    def is_good_string(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:  # char == ')'\n                balance -= 1\n            if balance < 0:  # more closing than opening at any point\n                return False\n        return balance == 0  # must be balanced overall\n\n    # Get the two strings\n    first = lst[0]\n    second = lst[1]\n\n    # Check both concatenation orders\n    if is_good_string(first + second) or is_good_string(second + first):\n        return 'Yes'\n    return 'No'\n\n",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 120,
        "k_value": 5,
        "code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Sort the array in descending order and take the top k elements\n    top_k = sorted(arr, reverse=True)[:k]\n    # Sort the top k elements in ascending order\n    return sorted(top_k)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 121,
        "k_value": 5,
        "code": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==> 0\n    \"\"\"\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 122,
        "k_value": 5,
        "code": "def add_elements(arr, k):\n    sum_elements = 0\n    for i in range(k):\n        if abs(arr[i]) <= 99:\n            sum_elements += arr[i]\n    return sum_elements",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 123,
        "k_value": 5,
        "code": "def get_odd_collatz(n):\n    collatz_seq = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = n * 3 + 1\n        collatz_seq.append(n)\n    return sorted([num for num in collatz_seq if num % 2 != 0])",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 124,
        "k_value": 5,
        "code": "def valid_date(date):\n    \"\"\"Validate a given date string and return True if valid, otherwise False.\n    \n    The date is valid if:\n    1. The date string is not empty.\n    2. The number of days is correct based on the month.\n    3. The month is between 1 and 12.\n    4. The date is in the format: mm-dd-yyyy\n    \"\"\"\n    # Check if the date string is empty\n    if not date:\n        return False\n    \n    # Check for correct format mm-dd-yyyy\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n\n    # Unpack the parts\n    month_str, day_str, year_str = parts\n\n    # Validate month\n    if not month_str.isdigit() or not 1 <= int(month_str) <= 12:\n        return False\n    month = int(month_str)\n\n    # Validate day\n    if not day_str.isdigit():\n        return False\n    day = int(day_str)\n\n    # Validate year\n    if not year_str.isdigit() or len(year_str) != 4:\n        return False\n    year = int(year_str)\n\n    # Days in each month\n    days_in_month = {\n        1: 31,\n        2: 29,  # We will not check for leap years in this case\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31,\n    }\n\n    # Check if the day is valid for the given month\n    if not (1 <= day <= days_in_month[month]):\n        return False\n\n    return True",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 125,
        "k_value": 5,
        "code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for letter in txt if letter.islower() and (ord(letter) - ord('a')) % 2 != 0)\n\n# Test cases",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 126,
        "k_value": 5,
        "code": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) ➞ True\n    is_sorted([1, 2, 3, 4, 5]) ➞ True\n    is_sorted([1, 3, 2, 4, 5]) ➞ False\n    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False\n    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True\n    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False\n    '''\n    \n    if len(lst) <= 1:\n        return True  # A single element or empty list is considered sorted\n\n    previous = lst[0]\n    count = {}\n    \n    for number in lst:\n        if number < previous:\n            return False  # Found a number that is less than the previous one\n        previous = number\n        \n        # Count occurrences of each number\n        if number in count:\n            count[number] += 1\n        else:\n            count[number] = 1\n            \n        # If any number occurs more than twice, return False\n        if count[number] > 2:\n            return False\n\n    return True",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 127,
        "k_value": 5,
        "code": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"Determine if the length of intersection of two intervals is a prime number.\"\"\"\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Find the overlap\n    start_max = max(start1, start2)\n    end_min = min(end1, end2)\n    \n    # Calculate the length of the intersection if it exists\n    if start_max <= end_min:\n        intersection_length = end_min - start_max\n        if is_prime(intersection_length):\n            return \"YES\"\n    \n    return \"NO\"",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 128,
        "k_value": 5,
        "code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    product = 1\n    sum_magnitudes = 0\n    \n    for num in arr:\n        if num > 0:\n            product *= 1\n            sum_magnitudes += abs(num)\n        elif num < 0:\n            product *= -1\n            sum_magnitudes += abs(num)\n        else:\n            product *= 0\n    \n    return product * sum_magnitudes",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 129,
        "k_value": 5,
        "code": "def minPath(grid, k):\n    rows, cols = len(grid), len(grid[0])\n    min_path = None\n\n    def dfs(r, c, path, length):\n        nonlocal min_path\n        # Base case: if the path length equals k\n        if length == k:\n            if min_path is None or path < min_path:\n                min_path = path\n            return\n        \n        # Directions for moving in the grid (North, South, East, West)\n        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        \n        for dr, dc in directions:\n            nr, nc = r + dr, c + dc\n            # Check if the new position is within bounds\n            if 0 <= nr < rows and 0 <= nc < cols:\n                dfs(nr, nc, path + [grid[nr][nc]], length + 1)\n\n    # Start DFS from every cell in the grid\n    for i in range(rows):\n        for j in range(cols):\n            dfs(i, j, [grid[i][j]], 1)\n\n    return min_path",
        "passed": false,
        "error_type": "TimeoutError",
        "error_info": ""
    },
    {
        "sample_id": 130,
        "k_value": 5,
        "code": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    \n    result = []\n\n    def tribonacci_helper(k):\n        if k == 1:\n            return 3\n        if k % 2 == 0:\n            return 1 + k / 2\n        else:\n            return tribonacci_helper(k - 1) + tribonacci_helper(k - 2) + tribonacci_helper(k + 1)\n\n    for i in range(n + 1):\n        result.append(tribonacci_helper(i))\n\n    return result",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 131,
        "k_value": 5,
        "code": "def digits(n):\n    product = 1\n    has_odd = False\n    n_str = str(n)\n    \n    for digit_char in n_str:\n        digit = int(digit_char)\n        if digit % 2 != 0:\n            has_odd = True\n            product *= digit\n    \n    if not has_odd:\n        return 0\n    else:\n        return product",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 132,
        "k_value": 5,
        "code": "def is_nested(string):\n    opening_count = 0\n    closing_count = 0\n    depth = 0\n    has_nesting = False\n\n    for char in string:\n        if char == '[':\n            opening_count += 1\n            depth += 1\n            if depth > 1:\n                has_nesting = True\n        elif char == ']':\n            closing_count += 1\n            depth -= 1\n\n        if closing_count > opening_count:\n            return False\n\n    return has_nesting",
        "passed": false,
        "error_type": "AssertionError",
        "error_info": ""
    },
    {
        "sample_id": 133,
        "k_value": 5,
        "code": "import math\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int (Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    return sum(math.ceil(x) ** 2 for x in lst)\n\n# Example usages:",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 134,
        "k_value": 5,
        "code": "def check_if_last_char_is_a_letter(txt):\n    if len(txt) == 0:\n        return False\n    else:\n        if txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == ' '):\n            return True\n        else:\n            return False",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 135,
        "k_value": 5,
        "code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i\n    if max_index == -1:\n        return -1\n    else:\n        return max_index",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 136,
        "k_value": 5,
        "code": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    largest_negative = None\n    smallest_positive = None\n\n    for number in lst:\n        if number < 0:\n            if largest_negative is None or number > largest_negative:\n                largest_negative = number\n        elif number > 0:\n            if smallest_positive is None or number < smallest_positive:\n                smallest_positive = number\n\n    return (largest_negative, smallest_positive)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 137,
        "k_value": 5,
        "code": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) ➞ 2.5\n    compare_one(1, \"2,3\") ➞ \"2,3\"\n    compare_one(\"5,1\", \"6\") ➞ \"6\"\n    compare_one(\"1\", 1) ➞ None\n    \"\"\"\n\n    def parse_number(value):\n        \"\"\"Convert a string to a float or int, considering both '.' and ',' as decimal separators.\"\"\"\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n        return float(value) if isinstance(value, (str, int, float)) else value\n    \n    a_parsed = parse_number(a)\n    b_parsed = parse_number(b)\n\n    if a_parsed == b_parsed:\n        return None\n\n    return a if a_parsed > b_parsed else b",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 138,
        "k_value": 5,
        "code": "def is_equal_to_sum_even(n):\n    if n < 8 or n % 2 != 0:\n        return False\n    for i in range(2, n - 3, 2):\n        for j in range(i, n - i - 1, 2):\n            for k in range(j, n - i - j - 1, 2):\n                l = n - i - j - k\n                if l % 2 == 0:\n                    return True\n    return False",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 139,
        "k_value": 5,
        "code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        factorial = 1\n        for j in range(1, i+1):\n            factorial *= j\n        result *= factorial\n    return result\n\n# Test the function",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 140,
        "k_value": 5,
        "code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    import re\n\n    # Replace more than 2 consecutive spaces with '-'\n    text = re.sub(r' {3,}', '-', text)\n    \n    # Replace remaining single and double spaces with '_'\n    text = text.replace(' ', '_')\n\n    return text",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 141,
        "k_value": 5,
        "code": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphabet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphabet letter)\n    \"\"\"\n    \n    # Split the file name into name and extension\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    name, ext = file_name.split('.')\n    \n    # Check if name is not empty and starts with a letter\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Check if the extension is valid\n    valid_extensions = ['txt', 'exe', 'dll']\n    if ext not in valid_extensions:\n        return 'No'\n    \n    # Count the digits in the file name\n    digit_count = sum(c.isdigit() for c in file_name)\n    \n    # Check if there are more than three digits\n    if digit_count > 3:\n        return 'No'\n    \n    return 'Yes'",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 142,
        "k_value": 5,
        "code": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    total = 0\n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n            total += value ** 2  # Square if index is a multiple of 3\n        elif index % 4 == 0:\n            total += value ** 3  # Cube if index is a multiple of 4 but not 3\n        else:\n            total += value  # Keep the value if not a multiple of 3 or 4\n    return total",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 143,
        "k_value": 5,
        "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = []\n    for word in words:\n        if is_prime(len(word)):\n            prime_words.append(word)\n    return ' '.join(prime_words)\n\n# Test the function\nsentence1 = \"This is a test\"\n\nsentence2 = \"lets go for swimming\"",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 144,
        "k_value": 5,
        "code": "def simplify(x, n):\n    # Split the fractions into numerator and denominator\n    x_numerator, x_denominator = map(int, x.split('/'))\n    n_numerator, n_denominator = map(int, n.split('/'))\n\n    # Calculate the numerator and denominator of the product\n    result_numerator = x_numerator * n_numerator\n    result_denominator = x_denominator * n_denominator\n\n    # Check if the result is a whole number\n    return result_numerator % result_denominator == 0",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 145,
        "k_value": 5,
        "code": "def sum_of_digits(num):\n    return sum(int(digit) for digit in str(abs(num)))\n\ndef order_by_points(nums):\n    if not nums:\n        return []\n    \n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))",
        "passed": false,
        "error_type": "AssertionError",
        "error_info": ""
    },
    {
        "sample_id": 146,
        "k_value": 5,
        "code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        first_digit = abs(num) // 10**(len(str(abs(num)))-1)\n        last_digit = abs(num) % 10\n        if num > 10 and first_digit % 2 != 0 and last_digit % 2 != 0:\n            count += 1\n    return count\n\n# Test cases",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 147,
        "k_value": 5,
        "code": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    # Generate the array a\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Count occurrences of each remainder when divided by 3\n    remainder_count = [0, 0, 0]\n    \n    for num in a:\n        remainder_count[num % 3] += 1\n        \n    # Count valid triples\n    count = 0\n    \n    # All three numbers with same remainder\n    for r in range(3):\n        if remainder_count[r] >= 3:\n            count += (remainder_count[r] * (remainder_count[r] - 1) * (remainder_count[r] - 2)) // 6\n            \n    # One of each remainder\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]\n\n    return count\n\n# Example usage",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 148,
        "k_value": 5,
        "code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx > end_idx:\n        start_idx, end_idx = end_idx, start_idx\n    \n    return tuple([planet for planet in planets if start_idx < planets.index(planet) < end_idx])\n\n# Test cases",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 149,
        "k_value": 5,
        "code": "def sorted_list_sum(lst):\n    def is_even_length(word):\n        return len(word) % 2 == 0\n\n    valid_words = [word for word in lst if is_even_length(word)]\n    sorted_words = sorted(valid_words, key=lambda x: (len(x), x))\n\n    return sorted_words",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 150,
        "k_value": 5,
        "code": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \"\"\"\n    if n <= 1:\n        return y\n    \n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    \n    return x",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 151,
        "k_value": 5,
        "code": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    \n    result = 0\n    \n    for num in lst:\n        if num > 0 and isinstance(num, int) and num % 2 != 0:\n            result += num ** 2\n    \n    return result",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 152,
        "k_value": 5,
        "code": "def compare(game, guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    return [abs(g - s) for g, s in zip(guess, game)]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 153,
        "k_value": 5,
        "code": "def Strongest_Extension(class_name, extensions):\n    def get_strength(extension):\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        return CAP - SM\n\n    strongest_ext = max(extensions, key=get_strength)\n    return f\"{class_name}.{strongest_ext}\"",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 154,
        "k_value": 5,
        "code": "def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n    \"\"\"\n    # Check if b is longer than a; if it is, it cannot be a substring\n    if len(b) > len(a):\n        return False\n    \n    # Create a string of b concatenated with itself\n    double_b = b + b\n    \n    # Check if a contains any substring of double_b which is of length len(b)\n    return any(double_b[i:i+len(b)] in a for i in range(len(b)))\n\n# Example usage:",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 155,
        "k_value": 5,
        "code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    \n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return even_count, odd_count\n\n# Test cases",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 156,
        "k_value": 5,
        "code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not (1 <= number <= 1000):\n        raise ValueError(\"Number must be between 1 and 1000\")\n\n    roman_numerals = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'),\n        (1, 'i')\n    ]\n\n    result = []\n\n    for value, numeral in roman_numerals:\n        while number >= value:\n            result.append(numeral)\n            number -= value\n\n    return ''.join(result)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 157,
        "k_value": 5,
        "code": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is a right angle or \n    90 degrees.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n\n    # Sort the sides to ensure the longest is treated as the hypotenuse\n    sides = sorted([a, b, c])\n    \n    # Check the Pythagorean theorem condition\n    return sides[0]**2 + sides[1]**2 == sides[2]**2",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 158,
        "k_value": 5,
        "code": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n    \"\"\"\n    max_word = \"\"\n    max_unique_count = 0\n\n    for word in words:\n        unique_char_count = len(set(word))\n\n        if (unique_char_count > max_unique_count or\n           (unique_char_count == max_unique_count and word < max_word)):\n            max_unique_count = unique_char_count\n            max_word = word\n\n    return max_word",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 159,
        "k_value": 5,
        "code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    carrots_left = max(0, remaining - need)\n    return [total_eaten, carrots_left]\n\n# Example uses",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 160,
        "k_value": 5,
        "code": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebraic \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator = ['+', '*', '-']\n    operand = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    \n    # Start with the first operand\n    expression = str(operand[0])\n    \n    # Iterate over the operators and respective operands\n    for op, num in zip(operator, operand[1:]):\n        expression += f\" {op} {num}\"\n    \n    # Evaluate the final expression\n    return eval(expression)\n\n# Example usage:\n# result = do_algebra(['+', '*', '-'], [2, 3, 4, 5])\n# print(result)  # Output: 9",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 161,
        "k_value": 5,
        "code": "def solve(s):\n    result = \"\"\n    has_letter = False\n    \n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    \n    if not has_letter:\n        result = result[::-1]\n    \n    return result",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 162,
        "k_value": 5,
        "code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    return hashlib.md5(text.encode()).hexdigest()",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 163,
        "k_value": 5,
        "code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    result = []\n    \n    # Ensure we iterate from the smaller to the larger\n    start = min(a, b) + 1\n    end = max(a, b)\n    \n    for num in range(start, end):\n        if num % 2 == 0:\n            result.append(num)\n    \n    return result",
        "passed": false,
        "error_type": "AssertionError",
        "error_info": "Test 1"
    }
]