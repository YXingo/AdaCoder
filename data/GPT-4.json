[
    {
        "sample_id": 0,
        "k_value": 5,
        "code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    numbers.sort()  # sort the list of numbers   \n    for i in range(len(numbers) - 1):   \n        if abs(numbers[i] - numbers[i + 1]) < threshold:  # if the difference between two adjacent numbers is less than threshold\n            return True\n    return False",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 1,
        "k_value": 5,
        "code": "\n\nfrom typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    open_count = 0\n    close_count = 0\n    start = 0\n    result = []\n\n    paren_string = paren_string.replace(' ', '')   # remove all spaces\n\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':   # if the character is an open paren, increment the open_count\n            open_count += 1\n        elif paren_string[i] == ')':  # if the character is a closed paren, increment the close_count\n            close_count += 1\n        \n        if open_count == close_count:  # if the open and closed counts are the same, we have a separate group\n            result.append(paren_string[start:i+1])\n            start = i+1   # update the start for the next group\n    \n    return result\n\n",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 2,
        "k_value": 5,
        "code": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 3,
        "k_value": 5,
        "code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 4,
        "k_value": 5,
        "code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" \n    For a given list of input numbers, calculate Mean Absolute Deviation around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n\n    # calculate mean\n    mean_value = sum(numbers) / len(numbers)\n\n    # calculate absolute deviations\n    abs_deviations = [abs(x - mean_value) for x in numbers]\n\n    # return the mean of these absolute deviations\n    return sum(abs_deviations) / len(abs_deviations)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 5,
        "k_value": 5,
        "code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for num in numbers:\n        result.append(num)\n        result.append(delimeter)\n    if result:\n        result.pop()  # Remove the extra delimeter after the last number.\n    return result",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 6,
        "k_value": 5,
        "code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    results = []\n    for group in paren_string.split():\n        level = 0\n        max_level = 0\n        for char in group:\n            if char == '(':\n                level += 1\n                max_level = max(max_level, level)\n            elif char == ')':\n                level -= 1\n        results.append(max_level)\n    return results",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 7,
        "k_value": 5,
        "code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" \n    Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    # using list comprehension to get only those strings from list that contain the given substring\n    return [string for string in strings if substring in string]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 8,
        "k_value": 5,
        "code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n\n    sum_numbers = sum(numbers)\n    product = 1\n    for num in numbers:\n        product *= num\n    \n    return (sum_numbers, product if numbers else 1)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 9,
        "k_value": 5,
        "code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n        return []\n        \n    max_so_far = numbers[0]\n    result = [max_so_far]\n    \n    for num in numbers[1:]:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n    \n    return result\n\n",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 10,
        "k_value": 5,
        "code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if string == \"\" or is_palindrome(string):\n        return string\n\n    # Find the longest palindromic suffix\n    for i in range(len(string) - 1, -1, -1):\n        suffix = string[i:]\n        if is_palindrome(suffix):\n            break\n\n    # Find prefix and prepend reversed prefix to the end of the string\n    prefix = string[:i]\n    return string + prefix[::-1]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 11,
        "k_value": 5,
        "code": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    res = ''\n    for i in range(len(a)):\n        bit_a = int(a[i])\n        bit_b = int(b[i])\n        xor_bit = bit_a^bit_b\n        res += str(xor_bit)\n    return res",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 12,
        "k_value": 5,
        "code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 13,
        "k_value": 5,
        "code": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return abs(a)\n\n",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 14,
        "k_value": 5,
        "code": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i + 1] for i in range(len(string))]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 15,
        "k_value": 5,
        "code": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return \" \".join(str(i) for i in range(n+1))",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 16,
        "k_value": 5,
        "code": "def count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    # Convert the string to lowercase to ensure case insensitivity, then convert the resulting string to a set (which \n    # removes duplicates), and finally find the length of the set\n    return len(set(string.lower()))",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 17,
        "k_value": 5,
        "code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    # Splitting the music string into individual notes\n    notes = music_string.split()\n    \n    # Initialize an empty list to store note beats\n    note_beats = []\n    \n    # A legend dictionary\n    legend = {'o' : 4, 'o|' : 2, '.|' : 1}\n\n    # Iterate through each note\n    for note in notes:\n        # If note exists in legend dictionary, add its corresponding beat to the note_beats list\n        # If note does not exist in legend, ignore and continue onto next note\n        if note in legend:\n            note_beats.append(legend[note])\n    \n    # Return list of beats corresponding to the notes\n    return note_beats",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 18,
        "k_value": 5,
        "code": "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            start = pos + 1\n            count += 1\n        else:\n            break\n    return count",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 19,
        "k_value": 5,
        "code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_words = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, \n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Split the string into a list of words\n    words = numbers.split()\n    \n    # Replace each word in the list with its corresponding number\n    number_list = [num_words[word] for word in words]\n    \n    # Sort the list of numbers\n    sorted_number_list = sorted(number_list)\n    \n    # Convert the sorted list of numbers back to words\n    sorted_words = [key  for (key, value) in num_words.items() if value in sorted_number_list]\n    \n    # Concatenate the sorted list of words back into a string, separated by spaces\n    sorted_string = ' '.join(sorted_words)\n    \n    return sorted_string",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 20,
        "k_value": 5,
        "code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = numbers[1] - numbers[0]\n\n    for i in range(2, len(numbers)):\n        diff = numbers[i] - numbers[i-1]\n\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i-1], numbers[i])\n            \n    return closest_pair\n\n",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 21,
        "k_value": 5,
        "code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    range_val = max(numbers) - min_val\n\n    return [(num - min_val) / range_val for num in numbers]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 22,
        "k_value": 5,
        "code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    # using list comprehension to generate the new list contains only the integers\n    return [i for i in values if type(i) == int]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 23,
        "k_value": 5,
        "code": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 24,
        "k_value": 5,
        "code": "def largest_divisor(n: int) -> int:\n    \"\"\" \n    For a given number n, find the largest number that divides n evenly, smaller than n\n    \"\"\"\n    # Starting from n-1\n    for i in range(n - 1, 0, -1):\n        # If n is divisible by i\n        if n % i == 0:\n            # Return i as the largest divisor\n            return i\n\n",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 25,
        "k_value": 5,
        "code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while(divisor * divisor <= n):\n        if (n % divisor):\n            divisor += 1\n        else:\n            n //= divisor\n            factors.append(divisor)\n    if (n > 1):\n        factors.append(n)\n    return factors\n\n",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 26,
        "k_value": 5,
        "code": "\nfrom typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    result = []\n    for num in numbers:\n        if numbers.count(num) == 1:\n            result.append(num)\n    return result",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 27,
        "k_value": 5,
        "code": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 28,
        "k_value": 5,
        "code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 29,
        "k_value": 5,
        "code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 30,
        "k_value": 5,
        "code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [i for i in l if i > 0]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 31,
        "k_value": 5,
        "code": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 32,
        "k_value": 5,
        "code": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef poly_derivative(xs: list, x: float):\n    \"\"\"\n    Evaluates derivative of polynomial with coefficients xs at point x.\n    If xs = [a, b, c ...] representing a + bx + cx^2 + ...\n    then the derivative is b + 2cx + ... and so on.\n    \"\"\"\n    return sum([(i+1)*coeff * math.pow(x, i) for i, coeff in enumerate(xs[1:])])\n\ndef find_zero(xs: list):\n    \"\"\" \n    xs are coefficients of a polynomial.\n    find_zero uses Newton's method to find x such that poly(x) = 0.\n    \"\"\"\n    MAX_ITER = 1000  # maximum iterations to prevent infinite loop\n    PRECISION = 1e-7  # level of precision needed to find the root\n    \n    guess = 0.0  # initial guess for root, can be any random number\n    \n    for _ in range(MAX_ITER):\n        function_value = poly(xs, guess)\n        derivative_value = poly_derivative(xs, guess)\n\n        if abs(function_value) < PRECISION:\n            return guess  # we've found a root\n        elif derivative_value != 0:  # to prevent division by zero\n            guess = guess - function_value / derivative_value\n        else:  # if derivative is zero, perturb the guess a little\n            guess = guess + 1e-5\n            \n    # If no root is found within the maximum number of iterations\n    return None",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 33,
        "k_value": 5,
        "code": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    \n    sorted_elements = sorted(l[::3])\n    \n    for i, v in enumerate(sorted_elements):\n        l[i * 3] = v\n    \n    return l",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 34,
        "k_value": 5,
        "code": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 35,
        "k_value": 5,
        "code": "def max_element(l: list):\n    if not l:  # list is empty       \n        return None\n    max_val = l[0]\n    for i in l:\n        if i > max_val:\n            max_val = i\n    return max_val\n\ndef max_element(l: list):\n    if not l:  # list is empty\n        return None\n    return max(l)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 36,
        "k_value": 5,
        "code": "def fizz_buzz(n: int):\n    num_sevens = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            num_sevens += str(i).count('7')\n    return num_sevens",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 37,
        "k_value": 5,
        "code": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    # List to hold values of even-indexed elements\n    even_indices_values = [l[i] for i in range(len(l)) if i % 2 == 0]\n    \n    # Sort the list of even-indexed elements\n    even_indices_values.sort()\n    \n    # Substitute the even indexed elements with sorted values\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l[i] = even_indices_values.pop(0)\n    \n    return l",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 38,
        "k_value": 5,
        "code": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # un-cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)",
        "passed": false,
        "error_type": "NameError",
        "error_info": "name 'encode_cyclic' is not defined"
    },
    {
        "sample_id": 39,
        "k_value": 5,
        "code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fib1, fib2 = 0, 1\n    count = 0\n    while True:\n        fib1, fib2 = fib2, fib1 + fib2\n        if is_prime(fib2):\n            count += 1\n        if count == n:\n            return fib2",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 40,
        "k_value": 5,
        "code": "def triples_sum_to_zero(l: list):\n    l.sort()  # sort list\n    n = len(l)  # size of list\n    for i in range(n - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        j, k = i + 1, n - 1\n        while j < k:\n            three_sum = l[i] + l[j] + l[k]\n            if three_sum < 0:\n                j += 1\n            elif three_sum > 0:\n                k -= 1\n            else:  # found three number whose sum is zero\n                return True\n    return False",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 41,
        "k_value": 5,
        "code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    return n**2",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 42,
        "k_value": 5,
        "code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [i + 1 for i in l]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 43,
        "k_value": 5,
        "code": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    # Using set for quicker search operation\n    set_nums = set(l)\n    \n    # Checking each number in set\n    for num in set_nums:\n        # If its negative exists in the set, return True\n        if -num in set_nums and num != 0:\n            return True\n\n    # If no such pair found, return False\n    return False\n\n",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 44,
        "k_value": 5,
        "code": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # Define a list to store the digits after conversion\n    digits = []\n    while(x):\n        # get the last digit by using the modulo operator\n        # then add it to the front (because it's the least significant)\n        digits.insert(0, str(x % base))\n        # integer division to remove the last digit\n        x //= base\n    return ''.join(digits)\n",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 45,
        "k_value": 5,
        "code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 46,
        "k_value": 5,
        "code": "def fib4(n: int) -> int:\n    # Base cases \n    if(n == 0): \n        return 0\n    if(n == 1 or n == 3): \n        return 0\n    if(n == 2): \n        return 2\n\n    # Initialize base values \n    a, b, c, d = 0, 0, 2, 0\n\n    for _ in range(4, n+1): \n        a, b, c, d = b, c, d, a+b+c+d\n\n    return d",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 47,
        "k_value": 5,
        "code": "def median(l):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    n = len(l)\n    if n % 2 == 0: # list length is even\n        return (l[n//2-1] + l[n//2]) / 2\n    else: # list length is odd\n        return l[n//2]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 48,
        "k_value": 5,
        "code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 49,
        "k_value": 5,
        "code": "def modp(n: int, p: int): \n    return pow(2, n, p)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 50,
        "k_value": 5,
        "code": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    Takes as input string encoded with encode_shift function and returns the decoded string by shifting each letter by -5 places in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord('a')) % 26) + ord('a')) for ch in s])",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 51,
        "k_value": 5,
        "code": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    \n    return \"\".join([char for char in text if char not in vowels])",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 52,
        "k_value": 5,
        "code": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for number in l:\n        if number >= t:\n            return False\n    return True",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 53,
        "k_value": 5,
        "code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 54,
        "k_value": 5,
        "code": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    # Create a set of characters from the strings s0 and s1\n    set_s0 = set(s0)\n    set_s1 = set(s1)\n    \n    # Check if the two sets are equal\n    return set_s0 == set_s1\n",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 55,
        "k_value": 5,
        "code": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    # Create fibonacci sequence list\n    fib_sequence = [0] * (n + 1)\n    \n    # base cases\n    if n > 0:\n        fib_sequence[1] = 1\n  \n    # generate the sequence up to n\n    for i in range(2, n + 1):\n        fib_sequence[i] = fib_sequence[i - 1] + fib_sequence[i - 2]\n    \n    # return nth Fibonacci number\n    return fib_sequence[n]\n\n",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 56,
        "k_value": 5,
        "code": "def correct_bracketing(brackets: str) -> bool:\n    # Initialize an empty stack\n    stack = []\n\n    # Go through each character in the string\n    for bracket in brackets:\n        if bracket == '<':\n            # Push opening brackets into the stack\n            stack.append(bracket)\n        elif bracket == '>':\n            # If there is no opening bracket to match against, return False\n            if len(stack) == 0:\n                return False\n                \n            # Pop the opening bracket that matches the closing bracket\n            stack.pop()\n            \n    # The string is correctly bracketed iff there are no unmatched opening brackets\n    return len(stack) == 0\n\n",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 57,
        "k_value": 5,
        "code": "def monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2: # Step 1: check if the list has at least two elements\n        return True\n    if l[0] < l[1]: # Step 2: check if the list should be monotonically increasing\n        for i in range(2, len(l)):\n            if l[i] < l[i-1]: # Step 3: check if there's any element out-of-order\n                return False\n    else: # If list should be monotonically decreasing\n        for i in range(2, len(l)):\n            if l[i] > l[i-1]: # Step 4: check if there's any element out-of-order\n                return False\n    return True # Step 5: if iterations run without finding any pairs out-of-order\n\n\n\nTrue\nFalse\nTrue",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 58,
        "k_value": 5,
        "code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # convert both lists into set to remove duplicate elements\n    # then find the intersection of two sets to get common unique elements\n    commonElements = set(l1).intersection(l2)\n    \n    # convert the result set back to list, sort it and return\n    return sorted(list(commonElements))",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 59,
        "k_value": 5,
        "code": "import math\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    #eliminating factor of 2\n    while n % 2 == 0:\n        max_prime = 2\n        n = n / 2\n\n    #n must be odd at this point\n    #skip the even numbers and iterate only for odd\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n / i\n    \n    #this condition is to handle the case when n\n    #is a prime number greater than 2\n    if n > 2:\n        max_prime = n\n\n    return max_prime",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 60,
        "k_value": 5,
        "code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return n * (n + 1) // 2",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 61,
        "k_value": 5,
        "code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack or stack.pop() != '(':\n                return False\n    return len(stack) == 0",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 62,
        "k_value": 5,
        "code": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n    return [i * xs[i] for i in range(1, len(xs))]\n\n",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 63,
        "k_value": 5,
        "code": "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    if n == 2:\n        return 1\n    \n    fibfib_seq = [0, 0, 1]\n    \n    for i in range(3, n + 1):\n        next_fibfib = fibfib_seq[-1] + fibfib_seq[-2] + fibfib_seq[-3]\n        fibfib_seq.append(next_fibfib)\n\n    return fibfib_seq[-1]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 64,
        "k_value": 5,
        "code": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n    \"\"\"\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    s = s.lower()\n\n    for i in s:\n        if i in vowels:\n            count += 1\n    \n    if s[-1] == 'y':\n        count += 1\n\n    return count\n\n",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 65,
        "k_value": 5,
        "code": "def circular_shift(x, shift):\n    num_str = str(x)\n    if shift > len(num_str):\n        return num_str[::-1]\n    else:\n        return num_str[-shift:] + num_str[:-shift]\n\n",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 66,
        "k_value": 5,
        "code": "def digitSum(s):\n    total = 0 \n    for character in s:\n        ascii_code = ord(character)\n        if ascii_code >= 65 and ascii_code <= 90:\n            total += ascii_code\n    return total",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 67,
        "k_value": 5,
        "code": "def fruit_distribution(s,n):\n    # split the string\n    values = s.split()\n    \n    # Fetch the numbers of apples and oranges from the string\n    apples = int(values[0])\n    oranges = int(values[3])\n    \n    # Subtract the number of apples and oranges from the total number of fruits\n    mangoes = n - apples - oranges\n    \n    return mangoes\n\n",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 68,
        "k_value": 5,
        "code": "def pluck(arr):\n    smallest_even = float('inf')\n    index = -1\n\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            index = i\n\n    if smallest_even == float('inf'):\n        return []\n    else:\n        return [smallest_even, index]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 69,
        "k_value": 5,
        "code": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    \n    # Initialize the result as -1.\n    result = -1\n\n    # Enumerate over all values.\n    for i in set(lst):\n        # If current value i's frequency is greater than or equal to i and i is greater than result, update the result.\n        if lst.count(i) >= i and i > result:\n            result = i\n\n    return result",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 70,
        "k_value": 5,
        "code": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    while lst:\n        min_val = min(lst)\n        lst.remove(min_val)\n        result.append(min_val)\n        if lst:\n            max_val = max(lst)\n            lst.remove(max_val)\n            result.append(max_val)\n    return result",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 71,
        "k_value": 5,
        "code": "def triangle_area(a, b, c):\n    if (a+b > c) and (a+c > b) and (b+c > a):\n        # calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # calculate the area\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 72,
        "k_value": 5,
        "code": "def will_it_fly(q, w):\n    # Check if list is balanced\n    if q == q[::-1]:\n        # calculate sum of all numbers in the list\n        total_weight = sum(q)\n        # Return True if the sum is less than or equal to w, otherwise return False\n        return total_weight <= w\n    else:\n        return False\n\n",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 73,
        "k_value": 5,
        "code": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\n    start = 0\n    end = len(arr) - 1\n    changes = 0\n\n    while start <= end:\n        if arr[start] != arr[end]:\n            changes += 1\n        start += 1\n        end -= 1\n\n    return changes",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 74,
        "k_value": 5,
        "code": "def total_match(lst1, lst2):\n    # Initialize the count variables\n    count1 = 0\n    count2 = 0\n    \n    # Count the total characters in lst1\n    for string in lst1:\n        count1 += len(string)\n        \n    # Count the total characters in lst2\n    for string in lst2:\n        count2 += len(string)\n\n    # Return the list with less total characters, lst1 in case of tie\n    if count1 <= count2:\n        return lst1\n    else:\n        return lst2",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 75,
        "k_value": 5,
        "code": "import math\n\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        sqrt_n = math.isqrt(n) + 1\n        for divisor in range(3, sqrt_n, 2):\n            if n % divisor == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a + 1):\n        while a % i == 0 and is_prime(i):\n            factors.append(i)\n            a /= i\n    return len(factors) == 3",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 76,
        "k_value": 5,
        "code": "def is_simple_power(x, n):\n    if x == 1:  # special case where x is 1\n        return True\n    elif n == 1:  # special case where n is 1\n        return x == 1\n    else:\n        root = x ** (1.0 / n)\n        return n ** round(root) == x",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 77,
        "k_value": 5,
        "code": "\n\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some integer number.\n    '''\n    return round(abs(a)**(1. / 3)) ** 3 == abs(a)\n\n",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 78,
        "k_value": 5,
        "code": "def hex_key(num):\n    # define the prime hexadecimal digits\n    prime_hex_digits = set('2357BD')\n    \n    # count the number of prime hexadecimal digits in the input number\n    count = sum(1 for char in num if char in prime_hex_digits)\n\n    return count\n\n",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 79,
        "k_value": 5,
        "code": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\"",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 80,
        "k_value": 5,
        "code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 81,
        "k_value": 5,
        "code": "def numerical_letter_grade(grades):\n    letter_grades=[]     \n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 82,
        "k_value": 5,
        "code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if is_prime(len(string)):\n        return True\n    else:\n        return False",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 83,
        "k_value": 5,
        "code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    # calculate the count of numbers ending with 1\n    ends_with_1 = 10 ** (n-1)\n    \n    # calculate the count of numbers starting with 1\n    starts_with_1 = 10 ** (n-1)\n    \n    # calculate the count of numbers starting and ending with 1\n    starts_and_ends_with_1 = 10 ** (n-2)\n    \n    # correct the total count by subtracting the overlap\n    total_count = ends_with_1 + starts_with_1 - starts_and_ends_with_1\n    \n    return total_count",
        "passed": false,
        "error_type": "AssertionError",
        "error_info": ""
    },
    {
        "sample_id": 84,
        "k_value": 5,
        "code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    \n    # Create a helper function that converts integer to binary.\n    def int_to_binary(n):\n        return bin(n).replace(\"0b\", \"\")\n    \n    # Get the binary representation of N, convert N to a string and\n    # convert every digit to integer then sum them up.\n    N_str = str(N)\n    sum_N = sum(map(int, N_str))\n\n    # Convert this sum to binary using helper function and return it.\n    return int_to_binary(sum_N)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 85,
        "k_value": 5,
        "code": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    sum = 0 # Initializing the sum as zero.\n    for i in range(len(lst)): # Looping through each element in the list.\n        # Check if the index is odd and the value is even.\n        if i % 2 != 0 and lst[i] % 2 == 0: \n            sum += lst[i] # Add the value to the sum.\n    return sum\n\n",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 86,
        "k_value": 5,
        "code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(word)) for word in s.split()])\n",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 87,
        "k_value": 5,
        "code": "def get_row(lst, x):\n    res = []\n    for i, row in enumerate(lst):\n        for j, el in enumerate(row):\n            if el == x:\n                res.append((i, j))\n    res = sorted(res, key=lambda r: (r[0], -r[1]))\n    return res",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 88,
        "k_value": 5,
        "code": "def sort_array(array):\n    if len(array) <= 1:\n        return array\n    elif (array[0] + array[-1]) % 2 == 0: # the sum is even\n        return sorted(array, reverse=True) # sort in descending order\n    else: # the sum is odd\n        return sorted(array) # sort in ascending order",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 89,
        "k_value": 5,
        "code": "def encrypt(s):\n    encrypted = \"\"\n    for char in s:\n        # Rotate alphabet by character code + 4\n        encrypted += chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n    return encrypted\n\n",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 90,
        "k_value": 5,
        "code": "def next_smallest(lst):\n    unique_lst = list(set(lst))  # Make unique\n    if len(unique_lst) < 2:      # Return None if less than 2 unique elements\n        return None\n    unique_lst.sort()            # Sort list\n    return unique_lst[1]         # Return the second (0-indexed) element",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 91,
        "k_value": 5,
        "code": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    boredom_count = 0\n    sentences = S.replace('?', '.').replace('!', '.').split('.')\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == 'I':\n            boredom_count += 1\n    return boredom_count\n\n# Testing the is_bored function\n# Output: 0\n\n# Output: 1",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 92,
        "k_value": 5,
        "code": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    '''\n    \n    if type(x)!= int or type(y)!= int or type(z)!= int:\n        return False\n\n    if (x+y==z) or (x+z==y) or (y+z==x):\n        return True\n\n    else:\n        return False",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 93,
        "k_value": 5,
        "code": "def encode(message):\n    vowels = 'aeiou'\n    encoded = ''\n    \n    for char in message:\n        if char.lower() in vowels:\n            encoded += chr(ord(char) + 2).upper() if char.islower() else chr(ord(char) + 2).lower()\n        else:\n            encoded += char.swapcase()\n            \n    return encoded\n\n",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 94,
        "k_value": 5,
        "code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    largest_prime = max(filter(is_prime, lst), default=0)\n    return sum(int(digit) for digit in str(largest_prime))",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 95,
        "k_value": 5,
        "code": "def check_dict_case(dict):\n    if not dict: # Step 1: Check if the dictionary is empty\n        return False\n    \n    lower_counter=0\n    upper_counter=0 # Step 2: Initialize the counters\n\n    for key in dict: # Step 3: Loop through the dictionary\n        if not isinstance(key, str): # Step 4: Check if key is a string\n            return False\n        else:\n            if key.islower():\n                lower_counter += 1 # Step 6: Increment lower case counter\n            elif key.isupper():\n                upper_counter += 1 # Step 6: Increment upper case counter\n            else:\n                return False # Step 7: Return False if key has both lower and upper case characters.\n\n    # Step 8: Check if either of the counters is equal to the number of keys. \n    if lower_counter == len(dict) or upper_counter == len(dict):\n        return True\n    else:\n        return False",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 96,
        "k_value": 5,
        "code": "def count_up_to(n):\n    primes = []  \n    for num in range(2, n):\n        prime = True\n        for i in range(2,num):\n            if (num%i==0):\n                prime = False\n        if prime:\n           primes.append(num)\n    return primes",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 97,
        "k_value": 5,
        "code": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    last_digit_a = abs(a) % 10    #abs is used to handle negative inputs\n    last_digit_b = abs(b) % 10    #abs is used to handle negative inputs\n\n    return last_digit_a * last_digit_b\n\n",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 98,
        "k_value": 5,
        "code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels and i % 2 == 0:\n            count += 1\n    return count",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 99,
        "k_value": 5,
        "code": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    value = float(value)\n    if value >= 0:\n        return int(value) if (value - int(value) < 0.5) else int(value) + 1\n    else:\n        return int(value) if (int(value) - value < 0.5) else int(value) - 1",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 100,
        "k_value": 5,
        "code": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    \n    # List to store the number of stones in each level\n    stone_pile = []\n\n    # Loop through each level\n    for i in range(n):\n        # Add the number of stones in the current level to the list\n        stone_pile.append(n + 2*i)\n\n    return stone_pile",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 101,
        "k_value": 5,
        "code": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n\n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n\n    # Replace commas with spaces\n    s = s.replace(\",\", \" \")\n\n    # Split string into words\n    words = s.split()\n\n    return words\n\n\n\n['Hi', 'my', 'name', 'is', 'John']\n['One', 'two', 'three', 'four', 'five', 'six']",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 102,
        "k_value": 5,
        "code": "def choose_num(x, y):\n    if x > y:\n        return -1\n    max_num = y\n    if max_num % 2 != 0:\n        max_num -= 1\n    if max_num >= x:\n        return max_num\n    else:\n        return -1",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 103,
        "k_value": 5,
        "code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 104,
        "k_value": 5,
        "code": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Initialize an empty list to store the numbers that do not have an even digit\n    no_even_digit = []\n\n    # Iterate over each number in x\n    for num in x:\n        # Convert the number to string to be able to iterate over its digits\n        num_str = str(num)\n        # Use a list comprehension to check if each digit is even, and if any are even then 'any' will return true\n        if not any(int(digit) % 2 == 0 for digit in num_str):\n            # If there is no even digits, add the number (as an integer) to the list\n            no_even_digit.append(int(num_str))\n\n    # Sort the list before returning it\n    no_even_digit.sort()\n\n    return no_even_digit",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 105,
        "k_value": 5,
        "code": "def by_length(arr):\n\n    num_to_str = {\n        1: \"One\", 2: \"Two\",   3: \"Three\", 4: \"Four\",\n        5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n\n    arr = [i for i in arr if i in num_to_str]\n    arr.sort(reverse=True)\n    arr = [num_to_str[i] for i in arr]\n\n    return arr",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 106,
        "k_value": 5,
        "code": "import math\n\ndef f(n):\n    result = []\n    for i in range(1,n+1):\n        if i % 2 == 0:\n           result.append(math.factorial(i))\n        else:\n           result.append(sum(range(1, i+1)))\n    return result",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 107,
        "k_value": 5,
        "code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_cnt = 0\n    odd_cnt = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_cnt += 1\n            else:\n                odd_cnt += 1\n    return even_cnt, odd_cnt",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 108,
        "k_value": 5,
        "code": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    \"\"\"\n    count = 0\n    for num in arr:\n        digits = [int(d) for d in str(abs(num))]\n        if(num < 0):\n            digits[0] = -digits[0]\n        if(sum(digits) > 0):\n            count += 1\n    return count",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 109,
        "k_value": 5,
        "code": "def move_one_ball(arr):\n    sorted_arr = sorted(arr)\n    if sorted_arr == arr:\n        return True\n    else:\n        for i in range(len(arr)):\n            arr = [arr[-1]] + arr[:-1]\n            if arr == sorted_arr:\n                return True\n    return False",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 110,
        "k_value": 5,
        "code": "def exchange(lst1, lst2):\n    odd_1 = len([i for i in lst1 if i % 2 != 0])\n    even_2 = len([i for i in lst2 if i % 2 == 0])\n    \n    if odd_1 <= even_2:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 111,
        "k_value": 5,
        "code": "def histogram(test):\n    # Split the input test string by space to get individual characters\n    char_list = test.split()\n    # Initialize an empty dictionary for histogram\n    histogram_dict = {}\n    # Traverse through each character from char_list\n    for char in char_list:\n        # If letter is already in the dictionary, increment its count\n        if char in histogram_dict:\n            histogram_dict[char] += 1\n        # Else, initialize the count of letter to 1\n        else:\n            histogram_dict[char] = 1\n    # Dictionary to store max frequency characters\n    max_freq_dict = {}\n    # If histogram_dict is empty, return it directly\n    if not histogram_dict:\n        return histogram_dict\n    # Find the max frequency from histogram_dict\n    max_freq = max(histogram_dict.values())\n    # Filter out the letters with max frequency\n    for key, value in histogram_dict.items():\n        if value == max_freq:\n            max_freq_dict[key] = value\n    # Return the dictionary of letters with max frequency\n    return max_freq_dict",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 112,
        "k_value": 5,
        "code": "def reverse_delete(s,c):\n    # Removed characters from s that are in c\n    removed_string = ''.join(ch for ch in s if ch not in c)\n    # Check if string is palindrome\n    is_palindrome = removed_string == removed_string[::-1]\n    return (removed_string, is_palindrome)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 113,
        "k_value": 5,
        "code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for d in s if int(d) % 2 != 0)\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(odd_count, odd_count, odd_count, odd_count))\n    return result",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 114,
        "k_value": 5,
        "code": "def minSubArraySum(nums):\n    # base case, if the list is empty, return 0\n    if not nums:\n        return 0\n\n    # initial value is the first element of the list\n    min_sum = nums[0]\n    # temp value to store the current subarray sum\n    temp_sum = nums[0]\n\n    for num in nums[1:]:\n        # if the current sum is positive, add the next number\n        # otherwise, start a new subarray at the next number\n        temp_sum = min(temp_sum + num, num)\n        \n        # update the minimum sum if a smaller sum is found\n        min_sum = min(min_sum, temp_sum)\n\n    return min_sum",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 115,
        "k_value": 5,
        "code": "def max_fill(grid, capacity):\n    import math\n    lowerings = 0\n    for row in grid:\n        water_units = row.count(1)\n        lowerings += math.ceil(water_units / capacity)\n    return lowerings\n\n",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 116,
        "k_value": 5,
        "code": "def sort_array(arr):\n    # Sort the array based on the number of ones in binary representation and \n    # in case of tie, sort based on decimal value.\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\n",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 117,
        "k_value": 5,
        "code": "def select_words(s, n):\n    if not s:\n        return []\n        \n    consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n    words = s.split()\n    result = []\n    \n    for word in words:\n        count = sum(letter in consonants for letter in word)\n        if count == n:\n            result.append(word)\n            \n    return result",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 118,
        "k_value": 5,
        "code": "def get_closest_vowel(word):\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    word_size = len(word)\n    \n    if word_size <= 2:\n        return \"\"\n\n    for i in range(word_size - 1, 1, -1):\n        if word[i-1] in vowels and word[i] not in vowels and word[i-2] not in vowels:\n            return word[i-1]\n    \n    return \"\"",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 119,
        "k_value": 5,
        "code": "def match_parens(lst):\n    def is_good(s):\n        count = 0\n        for char in s:\n            if char == '(':\n                count += 1\n            elif char == ')':\n                if count <= 0:\n                    return False\n                count -= 1\n        return count == 0\n\n    # check all possible combinations of lst[0] and lst[1]\n    for string in (lst[0] + lst[1], lst[1] + lst[0]):\n        if is_good(string):\n            return 'Yes'\n    return 'No'",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 120,
        "k_value": 5,
        "code": "def maximum(arr, k):\n    if len(arr) <= k:\n        return sorted(arr)\n    else:\n        sorted_array = sorted(arr, key=lambda x: -x)\n        return sorted(sorted_array[:k])",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 121,
        "k_value": 5,
        "code": "def solution(lst):\n    # Use list slicing to get all even index elements [::2], and then sum those which are odd (% 2 != 0)\n    return sum(el for i, el in enumerate(lst) if i % 2 == 0 and el % 2 != 0)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 122,
        "k_value": 5,
        "code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum([x for x in arr[:k] if x < 100])",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 123,
        "k_value": 5,
        "code": "def get_odd_collatz(n):\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = n / 2 if n % 2 == 0 else 3 * n + 1\n    odd_numbers.append(1)  # The sequence always ends with 1\n\n    return sorted(odd_numbers)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 124,
        "k_value": 5,
        "code": "def valid_date(date):\n    if not date:\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n\n    if not 1 <= month <= 12:\n        return False\n    if not 1 <= year <= 9999:\n        return False\n    \n    if month in {4, 6, 9, 11}:\n        return 1 <= day <= 30\n    elif month in {1, 3, 5, 7, 8, 10, 12}:\n        return 1 <= day <= 31\n    elif month == 2:\n        if ((year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)):\n            return 1 <= day <= 29  # leap year\n        else:\n            return 1 <= day <= 28  # non-leap year\n    return False",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 125,
        "k_value": 5,
        "code": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    # Step 1\n    if ' ' in txt:\n        return txt.split(' ')\n    \n    # Step 2\n    elif ',' in txt:\n        return txt.split(',')\n        \n    else:\n        odd_letter_counter = 0  # Step 3\n        # Step 4\n        for char in txt:\n            if char.islower() and (ord(char) - ord('a')) % 2 != 0:\n                odd_letter_counter += 1  # Step 5\n                \n        return odd_letter_counter  # Step 6",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 126,
        "k_value": 5,
        "code": "def is_sorted(lst):\n    # first we check if given list is sorted or not\n    if lst != sorted(lst):\n        return False\n    # then we count if any number appears more than twice, if yes we return False\n    for i in lst:\n        if lst.count(i) > 2:\n            return False\n    # if everything is fine, we return True\n    return True",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 127,
        "k_value": 5,
        "code": "def intersection(interval1, interval2):\n    \"\"\"Determines whether the length of intersection of two intervals is a prime number.\n    \n    Args:\n        interval1: a tuple of two integers (start, end)\n        interval2: a tuple of two integers (start, end)\n        \n    Returns:\n        \"YES\" if the length of the intersection is a prime number.\n        \"NO\" otherwise.\n        \n    \"\"\"\n    \n    # Find the start and end of the intersection\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    # if there's no intersection, return \"NO\"\n    if start >= end:\n        return \"NO\"\n    \n    # Otherwise, find the length of the intersection\n    length = end - start\n    \n    # if the length is less than or equal to 1, return \"NO\", because prime numbers are greater than 1\n    if length <= 1:\n        return \"NO\"\n    \n    # iterate for each integer between 2 to length-1\n    for i in range(2, length): \n        # if it can divide the length, then it's not a prime number, return \"NO\"\n        if length % i == 0: \n            return \"NO\"\n    \n    # if no such number found then return \"YES\" (length is a prime number)\n    return \"YES\"",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 128,
        "k_value": 5,
        "code": "def prod_signs(arr):\n    if not arr:\n        return None\n    signs = [0 if i==0 else 1 if i>0 else -1 for i in arr]\n    magnitudes = [abs(i) for i in arr]\n    return sum(magnitudes) * prod(signs)\n\ndef prod(array):\n    p = 1\n    for i in array:\n        p *= i\n    return p",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 129,
        "k_value": 5,
        "code": "from queue import PriorityQueue\nfrom typing import List\n\ndef get_adjacent_cells(x, y, N):\n    \"\"\"This function takes the current cell position and size of the grid\n    and returns all the valid adjacent cells.\"\"\"\n    adjacent_cells = []\n    for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n        new_x, new_y = x + dx, y + dy\n        if 0 <= new_x < N and 0 <= new_y < N:\n            adjacent_cells.append((new_x, new_y))\n    return adjacent_cells\n\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    \"\"\"This function takes the grid and k and returns the minimum path of length\n    k.\"\"\"\n\n    N = len(grid)    # Size of the grid\n\n    # Initialize the queue.\n    queue = PriorityQueue()\n    for i in range(N):\n        for j in range(N):\n            queue.put(([(grid[i][j])],(i,j), 1))\n\n    # Loop until queue is empty\n    while not queue.empty():\n        path, (x, y), steps = queue.get()\n        if steps == k:\n            return path\n        for new_x, new_y in get_adjacent_cells(x, y, N):\n            queue.put((path + [grid[new_x][new_y]], (new_x, new_y), steps + 1))\n\n    return []  # If no path of length k is found",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 130,
        "k_value": 5,
        "code": "def tri(n):\n    tribonacci_numbers = [0, 3]  # Initializing the base case\n\n    if n==0:\n        return [0]  # Special case when n = 0\n    \n    elif n==1:\n        return tribonacci_numbers  # Base case\n\n    else:\n        for i in range(2, n + 2):\n\n            if i % 2 == 0:\n                tribonacci_numbers.append(1 + i / 2)\n            \n            else:\n                tribonacci_numbers.append(tribonacci_numbers[i - 1] + tribonacci_numbers[i - 2] + tribonacci_numbers[i - 3])\n\n        return tribonacci_numbers",
        "passed": false,
        "error_type": "AssertionError",
        "error_info": ""
    },
    {
        "sample_id": 131,
        "k_value": 5,
        "code": "\ndef digits(n):\n    product = 1\n    at_least_one_odd = False\n    for ch in str(n):\n        digit = int(ch)\n        if digit % 2 == 1:\n            product *= digit\n            at_least_one_odd = True\n    if at_least_one_odd:\n        return product\n    else:\n        return 0",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 132,
        "k_value": 5,
        "code": "def is_nested(string):\n    counter = 0\n    nested = False\n    \n    for char in string:\n        if char == '[':\n            counter += 1\n            if counter > 1:\n                nested = True\n        elif char == ']':\n            if counter == 0:\n                return False\n            counter -= 1\n    \n    if counter != 0:\n        return False\n    else:\n        return True if nested else False\n        ",
        "passed": false,
        "error_type": "AssertionError",
        "error_info": ""
    },
    {
        "sample_id": 133,
        "k_value": 5,
        "code": "import math\n\ndef sum_squares(lst):\n    # round each element in the list to the upper int(Ceiling) first\n    lst = [math.ceil(num) for num in lst]\n    # return the sum of squared numbers in the given list\n    return sum([num ** 2 for num in lst])\n\n",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 134,
        "k_value": 5,
        "code": "def check_if_last_char_is_a_letter(txt):\n    #Handling the edge cases when the text is empty.\n    if txt == \"\":\n        return False\n    else:\n        #Check if the last char of the string is an alphabet\n        if txt[-1].isalpha():\n            #Check if the last char is not followed by space (i.e the last char is not part of a word)\n            if len(txt) == 1 or txt[-2] == \" \":\n                return True\n            \n    return False",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 135,
        "k_value": 5,
        "code": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n    \"\"\"\n    # Initialize the index as -1\n    index = -1\n    # Start iterating from the second element of the array\n    for i in range(1, len(arr)):\n        # If the current element is less than the previous element then\n        # update the index\n        if arr[i] < arr[i-1]:\n            index = i\n    # Return the index\n    return index\n\n# Testing the function",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 136,
        "k_value": 5,
        "code": "def largest_smallest_integers(lst):\n    # Check if the list is empty\n    if not lst:\n        return (None, None)\n    \n    neg_nums = [num for num in lst if num < 0]\n    pos_nums = [num for num in lst if num > 0]\n    \n    # Get the largest negative number if exists else None\n    a = max(neg_nums) if neg_nums else None\n    # Get the smallest positive number if exists else None\n    b = min(pos_nums) if pos_nums else None\n    \n    return (a, b)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 137,
        "k_value": 5,
        "code": "def compare_one(a, b):\n    a_float = float(str(a).replace(',', '.'))\n    b_float = float(str(b).replace(',', '.'))\n    \n    if a_float > b_float:\n        return a\n    elif b_float > a_float:\n        return b\n    else:\n        return None",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 138,
        "k_value": 5,
        "code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    return n >= 8 and n % 2 == 0",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 139,
        "k_value": 5,
        "code": "import math\n\ndef special_factorial(n):\n    special_fact = 1\n    for i in range(1, n+1):\n        special_fact *= math.factorial(i)\n    return special_fact",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 140,
        "k_value": 5,
        "code": "import re\n\ndef fix_spaces(text):\n    # replace multiple spaces by \"-\"\n    text = re.sub(\" {3,}\", \"-\", text)\n    # replace single spaces by \"_\"\n    text = re.sub(\" \", \"_\", text)\n    return text\n\n",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 141,
        "k_value": 5,
        "code": "def file_name_check(file_name):\n    \"\"\"Checks if the file's name is valid.\"\"\"\n    \n    # Split the file_name by the dot\n    split_name = file_name.split('.')\n    \n    # Check if there's more than one dot in the file_name\n    if len(split_name) != 2:\n        return 'No'\n    \n    # Check if the substring before the dot is valid\n    before_dot, after_dot = split_name\n    \n    # Check if it's empty or not starting with a latin alphabet letter\n    if not before_dot or not before_dot[0].isalpha():\n        return 'No'\n    \n    # Count the number of digits in the string before the dot\n    digits_count = sum(c.isdigit() for c in before_dot)\n    \n    if digits_count > 3:\n        return 'No'\n\n    # Check if the substring after the dot is valid\n    if after_dot not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 142,
        "k_value": 5,
        "code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i]**2\n        elif i % 4 == 0:\n            total += lst[i]**3\n        else:\n            total += lst[i]\n    return total",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 143,
        "k_value": 5,
        "code": "from sympy import isprime\n\ndef words_in_sentence(sentence):\n    return ' '.join([word for word in sentence.split() if isprime(len(word))])\n",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 144,
        "k_value": 5,
        "code": "from fractions import Fraction\n\ndef simplify(x, n):\n    # Convert strings to fractions\n    x = Fraction(*map(int, x.split('/')))\n    n = Fraction(*map(int, n.split('/')))\n    \n    # Multiply fractions together\n    result = x * n\n    \n    # Check if result is a whole number\n    return result.denominator == 1",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 145,
        "k_value": 5,
        "code": "def order_by_points(nums):\n    indexed_nums = []\n    for i, num in enumerate(nums):\n        str_num = str(abs(num))  # Convert to string to easily calculate sum of digits\n        digit_sum = sum(int(digit) for digit in str_num)  # Calculate sum of digits\n        indexed_nums.append((digit_sum, i))\n    indexed_nums.sort()  # Sort by sum of digits and then by original index\n    sorted_nums = [nums[i] for _, i in indexed_nums]  # Remap back to original numbers\n    return sorted_nums",
        "passed": false,
        "error_type": "AssertionError",
        "error_info": ""
    },
    {
        "sample_id": 146,
        "k_value": 5,
        "code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0:\n            count += 1\n    return count",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 147,
        "k_value": 5,
        "code": "def get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n+1)]\n    triples_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    triples_count += 1\n    return triples_count",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 148,
        "k_value": 5,
        "code": "def bf(planet1, planet2):\n    # We create a list with all the planets in the correct order from the Sun\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n    # We check if planet1 and planet2 are in the list, if not we return an empty tuple\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\n    # We get the index of planet1 and planet2 in our planets list\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n\n    # If index1 > index2 we swap planet1 and planet2 so that planet1 is always closer to the Sun\n    if index1 > index2:\n        index1, index2 = index2, index1\n\n    # We get all the planets that are located between planet1 and planet2 \n    # (not including planet1 and planet2) and convert them to a tuple which we return\n    return tuple(planets[index1+1:index2])",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 149,
        "k_value": 5,
        "code": "def sorted_list_sum(lst):\n    # filtering out the strings with odd lengths\n    lst = [string for string in lst if len(string) % 2 == 0]\n    \n    # sorting the list by length and then alphabetically\n    lst.sort(key=lambda x: (len(x), x))\n    \n    return lst",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 150,
        "k_value": 5,
        "code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 151,
        "k_value": 5,
        "code": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the square of the numbers\n    that are positive odd integers in the list.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    result = 0\n    for num in lst:\n        if num > 0 and num % 2 == 1:\n            result += num ** 2\n    return result",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 152,
        "k_value": 5,
        "code": "def compare(game, guess):\n    result = []\n    for i in range(len(game)):\n        result.append(abs(game[i]-guess[i]))\n    return result",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 153,
        "k_value": 5,
        "code": "def Strongest_Extension(class_name, extensions):\n    max_strength = -float('inf')\n    strongest_extension = \"\"\n    \n    for extension in extensions:\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        strength = CAP - SM\n\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    \n    return class_name + '.' + strongest_extension",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 154,
        "k_value": 5,
        "code": "def cycpattern_check(a , b):\n    rotate = lambda x: x[1:] + x[0]\n    for _ in range(len(b)):\n        if b in a:\n            return True\n        b = rotate(b)\n    return False",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 155,
        "k_value": 5,
        "code": "def even_odd_count(num):\n    \"\"\"\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    \n    num = abs(num)  # Convert the number to absolute if it's negative\n    num_str = str(num)\n    even_count = 0\n    odd_count = 0\n\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return (even_count, odd_count)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 156,
        "k_value": 5,
        "code": "def int_to_mini_roman(number):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num\n\n",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 157,
        "k_value": 5,
        "code": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Sort the triangle sides a, b, c\n    triangle_sides = sorted([a, b, c])\n    # Check if the triangle follows the Pythagorean theorem\n    return triangle_sides[0]**2 + triangle_sides[1]**2 == triangle_sides[2]**2\n\n",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 158,
        "k_value": 5,
        "code": "def find_max(words):\n    # Track max unique characters and the corresponding word\n    max_unique_characters = 0\n    max_word = \"\"\n\n    words.sort()  # sort in lexicographical order.\n\n    for word in words:\n        unique_characters = len(set(word))  # Count unique characters\n        if unique_characters > max_unique_characters:\n            max_unique_characters = unique_characters \n            max_word = word\n\n    return max_word",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 159,
        "k_value": 5,
        "code": "def eat(number, need, remaining):\n    # Initialize variables\n    total_eaten = number\n    remaining_carrots = remaining\n\n    # Check if there are enough carrots remaining\n    if need <= remaining:\n        # Eat the needed amount\n        total_eaten += need\n        remaining_carrots -= need\n    else:\n        # Eat all remaining carrots\n        total_eaten += remaining\n        remaining_carrots = 0\n\n    # Return the total number of eaten carrots and the remaining number of carrots\n    return [total_eaten, remaining_carrots]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 160,
        "k_value": 5,
        "code": "from functools import reduce\ndef do_algebra(operator, operand):\n    equation = \"\".join(str(op) for pair in zip(operand, operator + [\"\"]) for op in pair)\n    return eval(equation)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 161,
        "k_value": 5,
        "code": "def solve(s):\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.upper() if c.islower() else c.lower() for c in s)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 162,
        "k_value": 5,
        "code": "import hashlib\n\ndef string_to_md5(text):\n    if text:\n        hash_object = hashlib.md5(text.encode())  # convert string to bytes and generate md5 hash\n        md5_hash = hash_object.hexdigest()  # convert the binary hash to hexadecimal\n        return md5_hash\n    else:\n        return None",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 163,
        "k_value": 5,
        "code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    # Making sure a is smaller than b\n    if a > b:\n        a, b = b, a\n\n    # Empty list to store the even numbers \n    even_digits = []\n    \n    # Loop through the range a to b\n    for i in range(a, b+1):\n        # Check if the number is a digit and if it is even\n        if i < 10 and i % 2 == 0:\n            even_digits.append(i)\n    # Return the list of even digits\n    return even_digits",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    }
]