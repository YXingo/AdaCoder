[
    {
        "sample_id": 0,
        "k_value": 5,
        "code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if given list of numbers contains any two numbers closer to each other than\n    given threshold. \"\"\"\n    numbers.sort()  # Sorting the numbers to simplify comparisons\n    for i in range(len(numbers) - 1):\n        # Compare each number with the next one in the sorted list\n        if abs(numbers[i] - numbers[i + 1]) <= threshold:\n            return True\n    return False\n\n# Examples for testing:",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 1,
        "k_value": 5,
        "code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = paren_string.replace(\" \", \"\")  # Remove all spaces from the string\n    groups = []\n    balance = 0\n    group_start = 0\n\n    for index, char in enumerate(paren_string):\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        \n        # If balance returns to zero, we have a complete group\n        if balance == 0:\n            groups.append(paren_string[group_start:index + 1])\n            group_start = index + 1\n\n    return groups",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 2,
        "k_value": 5,
        "code": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 3,
        "k_value": 5,
        "code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero,\n    and at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    current_balance = 0\n    for op in operations:\n        current_balance += op\n        if current_balance < 0:\n            return True\n    return False",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 4,
        "k_value": 5,
        "code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    if not numbers:\n        return 0.0  # Handle empty list case\n    \n    n = len(numbers)\n    x_mean = sum(numbers) / n\n    deviations = [abs(x - x_mean) for x in numbers]\n    mad = sum(deviations) / n\n    return mad",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 5,
        "k_value": 5,
        "code": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    \"\"\" Insert a number 'delimiter' between every two consecutive elements of input list `numbers`\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    \n    # To avoid an extra delimiter at the end, handle the first element separately\n    result = [numbers[0]]\n    \n    # Append delimiter followed by the next element for all remaining elements in the list\n    for number in numbers[1:]:\n        result.extend([delimiter, number])\n    \n    return result",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 6,
        "k_value": 5,
        "code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    groups = paren_string.split()\n    max_depths = []\n    \n    for group in groups:\n        current_depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        max_depths.append(max_depth)\n    \n    return max_depths",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 7,
        "k_value": 5,
        "code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 8,
        "k_value": 5,
        "code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:  # if the list is empty\n        return (0, 1)\n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    return (total_sum, total_product)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 9,
        "k_value": 5,
        "code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:  # Handling the case when the input list is empty\n        return []\n    \n    result = []\n    max_so_far = numbers[0]\n    for num in numbers:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n    \n    return result",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 10,
        "k_value": 5,
        "code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of the supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Checking if the string is already a palindrome\n    if is_palindrome(string):\n        return string\n    \n    n = len(string)\n    longest_palindrome_suffix = 0\n    \n    # Find the longest palindromic suffix\n    for i in range(n):\n        if is_palindrome(string[i:]):\n            longest_palindrome_suffix = n - i\n            break\n    \n    # Get the non-palindromic prefix\n    non_palindrome_prefix = string[:n - longest_palindrome_suffix]\n    \n    # Reverse the non-palindromic prefix\n    reverse_prefix = non_palindrome_prefix[::-1]\n    \n    # Append reversed prefix to original string to form the shortest palindrome\n    result_palindrome = string + reverse_prefix\n    \n    return result_palindrome",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 11,
        "k_value": 5,
        "code": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Find the max length to pad the shorter string\n    max_length = max(len(a), len(b))\n    a = a.zfill(max_length)\n    b = b.zfill(max_length)\n\n    # XOR each character from the strings\n    result = []\n    for char_a, char_b in zip(a, b):\n        xor_result = '1' if char_a != char_b else '0'\n        result.append(xor_result)\n    \n    return ''.join(result)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 12,
        "k_value": 5,
        "code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of a list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:  # Check if the list is empty\n        return None\n    # Initialize 'max_string' to the first string and calculate its length\n    max_string = strings[0]\n    max_length = len(max_string)\n    \n    # Loop through the strings from the second item onwards\n    for s in strings[1:]:\n        # Update 'max_string' only if a longer string is found\n        if len(s) > max_length:\n            max_string = s\n            max_length = len(s)\n    \n    return max_string",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 13,
        "k_value": 5,
        "code": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 14,
        "k_value": 5,
        "code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string) + 1)]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 15,
        "k_value": 5,
        "code": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 up to n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n + 1))",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 16,
        "k_value": 5,
        "code": "def count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    # Convert the string to lower case to make it case-insensitive\n    normalized_string = string.lower()\n    # Create a set to store distinct characters\n    distinct_characters = set(normalized_string)\n    # The number of elements in the set is the number of distinct characters\n    return len(distinct_characters)\n\n",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 17,
        "k_value": 5,
        "code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    \n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    \n    return beats",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 18,
        "k_value": 5,
        "code": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\"Find how many times a given substring can be found in the original string, counting overlapping cases.\"\"\"\n    # Using maximum function to handle case when substring length is zero to avoid infinite loops.\n    step = max(1, len(substring))\n    count = 0\n    pos = -1\n    # Run a loop from start of the string to the length of the string minus the length of the substring + 1\n    while True:\n        # Find the next index of the substring starting from pos + 1\n        pos = string.find(substring, pos + 1)\n        if pos == -1:  # If no more occurrences are found, break the loop\n            break\n        count += 1  # Increase count for each occurrence found\n    return count",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 19,
        "k_value": 5,
        "code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Input is a space-delimited string of numerals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', and 'nine'.\n    Return the string with numbers sorted from smallest to largest.\n    \"\"\"\n    # Mapping of word numbers to their corresponding integers\n    word_to_number = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Split the input string into a list of word numbers\n    words_list = numbers.split()\n    \n    # Convert the list of word numbers to a list of integers using the dictionary\n    numbers_list = [word_to_number[word] for word in words_list]\n    \n    # Sort the list of integers\n    numbers_list.sort()\n    \n    # Convert the sorted list of integers back to a list of word numbers using a reverse lookup\n    sorted_words_list = [list(word_to_number.keys())[list(word_to_number.values()).index(number)] for number in numbers_list]\n    \n    # Join the list back into a single string separated by spaces\n    sorted_numbers_string = ' '.join(sorted_words_list)\n    \n    return sorted_numbers_string\n\n# Example usage:",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 20,
        "k_value": 5,
        "code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are \n        the closest to each other and return them in order (smaller number, larger number).\n    \"\"\"\n    import math\n    min_diff = math.inf  # initializes to a very large number\n    closest_pair = (0, 0)\n    \n    # Sorting the list first to make the closest numbers adjacent in sorted order\n    numbers.sort()\n    \n    for i in range(len(numbers) - 1):\n        current_diff = numbers[i+1] - numbers[i]\n        \n        # Check if the current difference is smaller than the smallest found so far\n        if current_diff < min_diff:\n            min_diff = current_diff\n            closest_pair = (numbers[i], numbers[i+1])\n    \n    return closest_pair",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 21,
        "k_value": 5,
        "code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"At least two numbers are required for proper rescaling.\")\n    \n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    \n    if range_val == 0:\n        raise ValueError(\"All numbers in the list are the same. Rescaling is not possible.\")\n    \n    return [(num - min_val) / range_val for num in numbers]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 22,
        "k_value": 5,
        "code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers \"\"\"\n    return [v for v in values if isinstance(v, int)]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 23,
        "k_value": 5,
        "code": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 24,
        "k_value": 5,
        "code": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number `n`, find the largest number that divides `n` evenly, smaller than `n`.\n    \n    Args:\n    n (int): The number to find the divisor for.\n\n    Returns:\n    int: The largest divisor of `n`, smaller than `n`.\n\n    Example:\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    # Start checking from the largest possible divisor, which is n-1\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1  # The loop should always find at least divisor 1, but including for completeness\n\n# Example usage:",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 25,
        "k_value": 5,
        "code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors.\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    # First check for number of 2s in the factorization\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    # Now check for odd factors\n    for i in range(3, int(n**0.5)+1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    # If n becomes a prime number greater than 2\n    if n > 2:\n        factors.append(n)\n    return factors",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 26,
        "k_value": 5,
        "code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    from collections import Counter\n    # Count the occurrences of each number\n    count = Counter(numbers)\n    # Collect numbers that appear exactly once, preserving order\n    return [num for num in numbers if count[num] == 1]\n\n# You can test the function with the following code:\n",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 27,
        "k_value": 5,
        "code": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    # Using a list comprehension to flip each character's case\n    flipped_string = ''.join([char.lower() if char.isupper() else char.upper() for char in string])\n    return flipped_string",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 28,
        "k_value": 5,
        "code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 29,
        "k_value": 5,
        "code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 30,
        "k_value": 5,
        "code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 31,
        "k_value": 5,
        "code": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 32,
        "k_value": 5,
        "code": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    Returns xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef poly_derivative(xs: list, x: float):\n    \"\"\"\n    Calculates the derivative of a polynomial with coefficients xs at point x.\n    The derivative of ax^n is n*ax^(n-1), therefore, the process is similar to poly.\n    \"\"\"\n    return sum([i * coeff * math.pow(x, i - 1) for i, coeff in enumerate(xs) if i > 0])\n\ndef find_zero(xs: list):\n    \"\"\"\n    Finds a zero of the polynomial described by xs using the Newton-Raphson method.\n    Assumes the input guarantees a solution.\n    \"\"\"\n    # Check the input constraints\n    if len(xs) % 2 != 0 or xs[-1] == 0:\n        raise ValueError(\"The coefficient list must have an even number of elements and the last coefficient must be non-zero\")\n\n    # Initial guess for x, could customize based on more insights into the polynomial\n    x = 0.1\n    tolerance = 1e-6\n    max_iterations = 1000\n    for _ in range(max_iterations):\n        px = poly(xs, x)\n        if abs(px) < tolerance:\n            return x\n        px_prime = poly_derivative(xs, x)\n        if px_prime == 0:\n            raise ZeroDivisionError(\"Derivative is zero, Newton-Raphson method will not converge\")\n        # Newton-Raphson formula: x_{n+1} = x_n - f(x_n) / f'(x_n)\n        x = x - px / px_prime\n\n    raise ValueError(\"Max iterations reached without converging\")\n\n# Test Cases\n",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 33,
        "k_value": 5,
        "code": "def sort_third(l: list):\n    # Extract elements at indices divisible by 3\n    third_indices_elements = [l[i] for i in range(0, len(l), 3)]\n\n    # Sort these extracted elements\n    third_indices_elements_sorted = sorted(third_indices_elements)\n\n    # Replace the original list's third index elements with sorted ones\n    for i, val in enumerate(range(0, len(l), 3)):\n        l[val] = third_indices_elements_sorted[i]\n\n    return l",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 34,
        "k_value": 5,
        "code": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    # Convert the list to a set to remove duplicates\n    unique_set = set(l)\n    # Convert the set back to a sorted list\n    return sorted(unique_set)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 35,
        "k_value": 5,
        "code": "def max_element(l: list) -> int:\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 36,
        "k_value": 5,
        "code": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\"\"\"\n    count_sevens = 0\n    \n    # Iterate through numbers less than n\n    for number in range(n):\n        if number % 11 == 0 or number % 13 == 0:\n            # Convert the number to string and count '7's\n            count_sevens += str(number).count('7')\n            \n    return count_sevens\n\n# Example usage/testing\n",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 37,
        "k_value": 5,
        "code": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    # Extract elements at even indices\n    even_index_values = [l[i] for i in range(0, len(l), 2)]\n    \n    # Sort the extracted elements\n    even_index_values.sort()\n    \n    # Re-insert the sorted elements back at even indices\n    sorted_list = l[:]\n    for i, value in zip(range(0, len(sorted_list), 2), even_index_values):\n        sorted_list[i] = value\n    \n    return sorted_list",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 38,
        "k_value": 5,
        "code": "def encode_cyclic(s: str) -> str:\n    \"\"\"\n    Returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # Split string into groups, each of length 3.\n    groups = [s[i:i+3] for i in range(0, len(s), 3)]\n    # Cycle elements in each group, unless the group has fewer than 3 characters.\n    groups = [(group[1:] + group[:1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str) -> str:\n    \"\"\"\n    Takes as input a string encoded with encode_cyclic function. Returns the decoded string.\n    \"\"\"\n    # Split encoded string into groups, each potentially of length 3.\n    groups = [s[i:i+3] for i in range(0, len(s), 3)]\n    # Reverse the cycling by moving the last character of each group to the front.\n    groups = [(group[-1:] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 39,
        "k_value": 5,
        "code": "def is_prime(num: int) -> bool:\n    if num <= 1:\n        return False\n    elif num <= 3:\n        return True\n    elif num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef fib_generator():\n    a, b = 1, 1\n    yield a  # fib(1)\n    yield b  # fib(2)\n    while True:\n        a, b = b, a + b\n        yield b\n\ndef prime_fib(n: int) -> int:\n    count = 0\n    for fib_num in fib_generator():\n        if is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 40,
        "k_value": 5,
        "code": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    n = len(l)\n    l.sort()\n    for i in range(n-2):\n        a = l[i]\n        start = i+1\n        end = n-1\n        while start < end:\n            b = l[start]\n            c = l[end]\n            if a + b + c == 0:\n                return True\n            elif a + b + c > 0:\n                end -= 1\n            else:\n                start += 1\n    return False",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 41,
        "k_value": 5,
        "code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Given n cars driving from left to right and n cars from right to left on a straight infinite road,\n    this function calculates the number of collisions assuming all cars move at the same speed and meet each other.\n    \n    Args:\n    n (int): The number of cars moving in each direction.\n    \n    Returns:\n    int: The total number of collisions.\n    \"\"\"\n    return n * n",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 42,
        "k_value": 5,
        "code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 43,
        "k_value": 5,
        "code": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    seen_elements = set()\n    for number in l:\n        if -number in seen_elements:\n            return True\n        seen_elements.add(number)\n    return False",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 44,
        "k_value": 5,
        "code": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(int(x % base))\n        x = x // base\n    digits.reverse()\n    return ''.join(str(digit) for digit in digits)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 45,
        "k_value": 5,
        "code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 46,
        "k_value": 5,
        "code": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the nth element of the fib4 number sequence. Do not use recursion.\n    \"\"\"\n    # Edge case\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    # Set up initial values\n    a, b, c, d = 0, 0, 2, 0  # Corresponds to fib4(0), fib4(1), fib4(2), fib4(3)\n\n    # Use a loop to calculate from fib4(4) up to fib4(n)\n    for _ in range(4, n + 1):\n        current = a + b + c + d\n        # Shift the previous values for the next iteration\n        a, b, c, d = b, c, d, current\n\n    return current",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 47,
        "k_value": 5,
        "code": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l_sorted = sorted(l)  # First, sort the list\n    n = len(l_sorted)\n    mid = n // 2  # Find the midpoint index\n\n    # If the list has an odd number of elements, return the middle element\n    if n % 2 == 1:\n        return l_sorted[mid]\n    # If the list has an even number of elements, return the average of the two middle elements\n    else:\n        return (l_sorted[mid - 1] + l_sorted[mid]) / 2.0",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 48,
        "k_value": 5,
        "code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    >>> is_palindrome('A man, a plan, a canal, Panama')\n    True\n    \"\"\"\n    # Remove non-alphanumeric characters and convert to lowercase\n    clean_text = ''.join(ch.lower() for ch in text if ch.isalnum())\n    # Check if the cleaned text is the same forward and backward\n    return clean_text == clean_text[::-1]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 49,
        "k_value": 5,
        "code": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 50,
        "k_value": 5,
        "code": "def encode_shift(s: str):\n    \"\"\"\n    Returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    Takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n# Testing the encode and decode functions\noriginal_text = \"hello\"\nencoded_text = encode_shift(original_text)\ndecoded_text = decode_shift(encoded_text)\n",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 51,
        "k_value": 5,
        "code": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes a string and returns a string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 52,
        "k_value": 5,
        "code": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 53,
        "k_value": 5,
        "code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 54,
        "k_value": 5,
        "code": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    # Use set to get the unique characters, then compare the sets\n    return set(s0) == set(s1)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 55,
        "k_value": 5,
        "code": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 56,
        "k_value": 5,
        "code": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    Return True if every opening bracket has a corresponding closing bracket\n    in the correct order (following each opening bracket should be its own closing\n    bracket before another opening bracket closes).\n    \n    Args:\n    brackets (str): A string consisting of '<' and '>'.\n    \n    Returns:\n    bool: True if the bracketing is correctly balanced, False otherwise.\n    \n    Examples:\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    balance = 0  # This will count the number of unmatched opening brackets\n\n    for bracket in brackets:\n        if bracket == \"<\":\n            balance += 1  # we have found a new unmatched opening bracket\n        elif bracket == \">\":\n            if balance == 0:\n                # We've found a closing bracket but there are no unmatched open brackets\n                return False\n            balance -= 1  # match found for a previously unmatched opening bracket\n\n    return balance == 0  # If balance is zero, all opening brackets have been matched",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 57,
        "k_value": 5,
        "code": "def monotonic(l: list) -> bool:\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 58,
        "k_value": 5,
        "code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # Convert both lists to sets to find common elements\n    set1 = set(l1)\n    set2 = set(l2)\n    # Find the intersection of both sets to get common elements\n    common_elements = set1.intersection(set2)\n    # Convert the set to a sorted list\n    return sorted(common_elements)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 59,
        "k_value": 5,
        "code": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Helper function to check if a number is prime\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    largest_prime = None\n    # Check division by 2 first to handle even numbers\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n\n    # Check odd factors from 3 up to sqrt(n)\n    factor = 3\n    while factor * factor <= n:\n        while n % factor == 0:\n            if is_prime(factor):\n                largest_prime = factor\n            n //= factor\n        factor += 2\n\n    # If n is still larger than 1 then it's prime and is a factor\n    if n > 1:\n        largest_prime = n if is_prime(n) else largest_prime\n\n    return largest_prime",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 60,
        "k_value": 5,
        "code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n using the formula: n * (n + 1) / 2.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return n * (n + 1) // 2",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 61,
        "k_value": 5,
        "code": "def correct_bracketing(brackets: str) -> bool:\n    open_count = 0\n    for char in brackets:\n        if char == '(':\n            open_count += 1\n        elif char == ')':\n            if open_count == 0:\n                return False\n            open_count -= 1\n\n    return open_count == 0",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 62,
        "k_value": 5,
        "code": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [i * xs[i] for i in range(1, len(xs))]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 63,
        "k_value": 5,
        "code": "def fibfib(n: int, memo=None):\n    # Initialize the memoization dictionary if it hasn't been initialized\n    if memo is None:\n        memo = {}\n\n    # Base cases defined by the sequence rules\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    # Check if the result is already computed and stored\n    if n in memo:\n        return memo[n]\n\n    # Recursive case: compute the result and store it in the memo dictionary\n    memo[n] = fibfib(n-1, memo) + fibfib(n-2, memo) + fibfib(n-3, memo)\n\n    # Return the computed value\n    return memo[n]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 64,
        "k_value": 5,
        "code": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    s = s.lower()  # Convert string to lowercase\n    count = 0\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    \n    # Check each character in the string\n    for char in s[:-1]:  # Iterate over the string except the last character\n        if char in vowels:\n            count += 1\n    \n    # Check the last character individually\n    if s:\n        last_char = s[-1]\n        if last_char in vowels or last_char == 'y':\n            count += 1\n    \n    return count\n\n# Additional test cases based on the FIX comment",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 65,
        "k_value": 5,
        "code": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12345, 1)\n    \"51234\"\n    >>> circular_shift(12345, 5)\n    \"12345\"\n    \"\"\"\n    x_str = str(x)\n    n = len(x_str)\n    \n    if shift > n:\n        return x_str[::-1]  # If shift exceeds number of digits, return reversed string\n    shift = shift % n  # Handle shifts larger than the digit count\n\n    # Perform the circular shift\n    shifted = x_str[-shift:] + x_str[:-shift]\n    return shifted",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 66,
        "k_value": 5,
        "code": "def digitSum(s):\n    \"\"\"Function to calculate the sum of ASCII values of uppercase letters in the input string.\"\"\"\n    return sum(ord(char) for char in s if char.isupper())\n\n# Example usage",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 67,
        "k_value": 5,
        "code": "def fruit_distribution(s,n):\n    \"\"\"\n    This function calculates the number of mango fruits in the basket.\n    \n    Args:\n    s (str): A string in the format \"{apples} apples and {oranges} oranges\" where\n             {apples} and {oranges} are integer values representing the number\n             of apples and oranges, respectively.\n    n (int): Total number of fruits in the basket.\n\n    Returns:\n    int: The number of mango fruits in the basket.\n\n    Example:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) -> 8\n    fruit_distribution(\"0 apples and 1 oranges\", 3) -> 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 95\n    fruit_distribution(\"100 apples and 1 oranges\", 120) -> 19\n    \"\"\"\n    # Split the input string to extract numbers\n    parts = s.split()\n    apple_count = int(parts[0])  # Number of apples is the first element\n    orange_count = int(parts[3])  # Number of oranges is the fourth element\n\n    # Calculate the number of mango fruits\n    mango_count = n - apple_count - orange_count\n    return mango_count",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 68,
        "k_value": 5,
        "code": "def pluck(arr):\n    min_even_index = None\n    min_even_value = None\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if min_even_value is None or arr[i] < min_even_value:\n                min_even_value = arr[i]\n                min_even_index = i\n            elif arr[i] == min_even_value:\n                min_even_index = min(min_even_index, i)\n    \n    if min_even_value is None:\n        return []\n    else:\n        return [min_even_value, min_even_index]\n\n# Test cases",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 69,
        "k_value": 5,
        "code": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such value exists, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    frequency_count = {}\n    \n    # Calculate the frequency of each number in the list\n    for number in lst:\n        if number in frequency_count:\n            frequency_count[number] += 1\n        else:\n            frequency_count[number] = 1\n            \n    # Initialize a variable to keep track of the maximum integer meeting the criteria\n    result = -1\n    \n    # Iterate through the frequency dictionary to find the greatest integer meeting the criteria\n    for number, frequency in frequency_count.items():\n        if number <= frequency:\n            if number > result:\n                result = number\n                \n    return result",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 70,
        "k_value": 5,
        "code": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    sorted_list = []\n    # Make a copy of the list to sort\n    temp_list = lst[:]\n    \n    # Determine whether to get min or max, start with min\n    min_turn = True\n    \n    while temp_list:\n        if min_turn:\n            # Find and append the minimum element then remove it\n            min_val = min(temp_list)\n            sorted_list.append(min_val)\n            temp_list.remove(min_val)\n            # Next turn is for max\n            min_turn = False\n        else:\n            # Find and append the maximum element then remove it\n            max_val = max(temp_list)\n            sorted_list.append(max_val)\n            temp_list.remove(max_val)\n            # Next turn is for min\n            min_turn = True\n            \n    return sorted_list",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 71,
        "k_value": 5,
        "code": "import math\n\ndef triangle_area(a, b, c):\n    # Check if the given sides can form a valid triangle\n    if (a + b <= c) or (a + c <= b) or (b + c <= a):\n        return -1\n    \n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    \n    # Round the area to 2 decimal places\n    return round(area, 2)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 72,
        "k_value": 5,
        "code": "def will_it_fly(q, w):\n    '''\n    Determine if the object `q` (a list) will fly.\n\n    An object will fly if:\n    1. It is balanced: meaning the list is palindromic.\n    2. The sum of its elements is less than or equal to a maximum weight `w`.\n\n    Args:\n    q (list): The list representing the object components.\n    w (int): The maximum allowable weight for the object to be airborne.\n\n    Returns:\n    bool: True if the object will fly, False otherwise.\n    '''\n\n    # Check if the list `q` is palindromic\n    is_balanced = q == q[::-1]\n    \n    # Calculate the sum of the list `q`\n    total_weight = sum(q)\n    \n    # Determine if `q` is within the allowable weight `w`\n    is_under_weight_limit = total_weight <= w\n    \n    # Return True if both conditions are met, otherwise return False\n    return is_balanced and is_under_weight_limit\n\n# Examples",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 73,
        "k_value": 5,
        "code": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    changes = 0\n\n    # Iterate from the start to the middle of the array\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n\n    return changes\n\n# Example test cases:",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 74,
        "k_value": 5,
        "code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst2 < total_chars_lst1:\n        return lst2\n    else:\n        return lst1",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 75,
        "k_value": 5,
        "code": "def is_multiply_prime(a):\n    def is_prime(n):\n        \"\"\" Helper function to check if the number is prime \"\"\"\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    \n    # 1. Generate all prime numbers less than 100.\n    primes = [i for i in range(100) if is_prime(i)]\n    \n    # 2. Use three nested loops to iterate over the list of primes numbers.\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                # 3. Multiply the three prime numbers.\n                product = i * j * k\n                # 4. Check if the multiplication exceeds the number `a`.\n                if product > a:\n                    break\n                # 5. If they match, return True.\n                if product == a:\n                    return True\n    # 6. If none of the combinations from the loops match `a`, return False.\n    return False\n\n# Example usage:",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 76,
        "k_value": 5,
        "code": "def is_simple_power(x, n):\n    # Check if n is 1, only 1**i equals to 1 for any i.\n    if n == 1:\n        return x == 1\n    # Check if n is not equal to 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x\n\n# Test cases",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 77,
        "k_value": 5,
        "code": "def iscube(a):\n    # Determine the cube root of the absolute value of a\n    cube_root = abs(a) ** (1/3)\n    \n    # Check if the rounded cube root cubed is equal to the absolute value of a\n    if round(cube_root) ** 3 == abs(a):\n        return True\n    return False\n\n# Test cases",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 78,
        "k_value": 5,
        "code": "def hex_key(num):\n    # Define the prime hex digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    \n    # Count the occurrences of prime hex digits\n    prime_count = 0\n    for digit in num:\n        if digit in prime_hex_digits:\n            prime_count += 1\n    \n    return prime_count\n\n# Example usage:",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 79,
        "k_value": 5,
        "code": "def decimal_to_binary(decimal):\n    # Convert the decimal number to binary using bin() and slicing off the '0b'\n    binary = bin(decimal)[2:]\n    # Format the string to include 'db' at the beginning and end\n    return \"db\" + binary + \"db\"\n\n# Example usage:",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 80,
        "k_value": 5,
        "code": "def is_happy(s):\n    \"\"\"Check if the string is happy or not.\"\"\"\n    n = len(s)\n    if n < 3:\n        return False\n    for i in range(n - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True\n\n# Test cases",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 81,
        "k_value": 5,
        "code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    \n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:  # This covers exactly 0.0 case\n            letter_grades.append('E')\n    \n    return letter_grades\n\n# Example:",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 82,
        "k_value": 5,
        "code": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n\n    def is_prime(n):\n        \"\"\" Helper function to check if a number is prime \"\"\"\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    # Get the length of the string\n    string_length = len(string)\n\n    # Use the helper function to determine if the length is a prime number\n    return is_prime(string_length)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 83,
        "k_value": 5,
        "code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1  # The only number is '1'\n\n    # Numbers starting with 1\n    starts_with_1 = 10 ** (n - 1)\n\n    # Numbers ending with 1\n    ends_with_1 = 9 * (10 ** (n - 2))\n\n    # Numbers starting and ending with 1\n    starts_ends_with_1 = 10 ** (n - 2)\n\n    # Total numbers starting or ending with 1\n    return starts_with_1 + ends_with_1 - starts_ends_with_1\n\n# Example: checking some values",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 84,
        "k_value": 5,
        "code": "def solve(N):\n    # Step 1: Compute the sum of digits of N\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    \n    # Step 2: Convert the sum to a binary string\n    binary_representation = bin(sum_of_digits)[2:]  # Strip the '0b' prefix that Python includes\n    \n    # Step 3: Return the binary string\n    return binary_representation",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 85,
        "k_value": 5,
        "code": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst, add the even elements that are at odd indices.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    sum_even_odd_indices = 0\n    # Iterate over the list with index\n    for index in range(1, len(lst), 2):  # start from 1 and step by 2 for odd indices\n        if lst[index] % 2 == 0:\n            sum_even_odd_indices += lst[index]\n    \n    return sum_even_odd_indices\n\n# Example usage:\nresult = add([4, 2, 6, 7])",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 86,
        "k_value": 5,
        "code": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n    \"\"\"\n    words = s.split(' ')\n    ordered_words = []\n    for word in words:\n        sorted_chars = sorted(word)\n        ordered_words.append(''.join(sorted_chars))\n    return ' '.join(ordered_words)\n\n# Test the function",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 87,
        "k_value": 5,
        "code": "def get_row(lst, x):\n    \"\"\"\n    Finds all occurrences of the integer x in a 2D list and returns their coordinates.\n    Rows are sorted in ascending order and columns in descending order within each row.\n    \"\"\"\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                coordinates.append((i, j))\n    # Sort by rows in ascending order, and sort columns in descending order\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates\n\n# Examples of usage:",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 88,
        "k_value": 5,
        "code": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) == 0:\n        return []\n    elif len(array) == 1:\n        return [array[0]]\n\n    # Create a copy of the original array\n    arr_copy = array[:]\n    \n    # Calculate the sum of the first and the last element\n    first_last_sum = arr_copy[0] + arr_copy[-1]\n    \n    # Sort based on the parity of the sum of first and last elements\n    if first_last_sum % 2 == 0:\n        sorted_arr = sorted(arr_copy, reverse=True)\n    else:\n        sorted_arr = sorted(arr_copy)\n        \n    return sorted_arr",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 89,
        "k_value": 5,
        "code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if 'a' <= char <= 'z':  # For lowercase letters\n            # Shift char forward by 4, wrap around using modulo\n            new_char = chr(((ord(char) - ord('a') + 4) % 26) + ord('a'))\n            result += new_char\n        elif 'A' <= char <= 'Z':  # For uppercase letters\n            # Shift char forward by 4, wrap around using modulo\n            new_char = chr(((ord(char) - ord('A') + 4) % 26) + ord('A'))\n            result += new_char\n        else:\n            # Non-alphabet characters remain the same\n            result += char\n    return result\n\n",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 90,
        "k_value": 5,
        "code": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None  # Not enough elements to find the second smallest\n\n    # Using a set to store unique elements     \n    unique_nums_set = set(lst)\n\n    # If there's not enough unique elements\n    if len(unique_nums_set) < 2:\n        return None\n\n    # Convert the set back to a sorted list\n    sorted_unique = sorted(unique_nums_set)\n\n    # The second smallest element\n    return sorted_unique[1]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 91,
        "k_value": 5,
        "code": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    # Split the string into sentences\n    sentences = []\n    start = 0\n    for i, char in enumerate(S):\n        if char in '.?!':\n            sentences.append(S[start:i].strip())\n            start = i + 1\n\n    # Count sentences starting with \"I \"\n    boredom_count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == 'I':\n            boredom_count += 1\n\n    return boredom_count",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 92,
        "k_value": 5,
        "code": "def any_int(x, y, z):\n    # Check if all numbers are integers\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        # Check if any number is equal to the sum of the other two\n        return x == y + z or y == x + z or z == x + y\n    else:\n        return False",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 93,
        "k_value": 5,
        "code": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    vowel_replacements = {\n        'a': 'c', 'A': 'C', 'e': 'g', 'E': 'G',\n        'i': 'k', 'I': 'K', 'o': 'q', 'O': 'Q',\n        'u': 'w', 'U': 'W'\n    }\n    \n    encoded_message = []\n    \n    for char in message:\n        if char in vowels:\n            # Swap vowel with corresponding mapped character\n            new_char = vowel_replacements[char]\n        else:\n            new_char = char\n        \n        # Swap the case of the new character (whether replaced or not)\n        encoded_message.append(new_char.swapcase())\n\n    # Return the final encoded string\n    return ''.join(encoded_message)\n\n# Example use",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 94,
        "k_value": 5,
        "code": "def is_prime(num):\n    \"\"\" Helper function to check if a number is a prime. \"\"\"\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef sum_of_digits(num):\n    \"\"\" Helper function to sum the digits of a number. \"\"\"\n    return sum(int(digit) for digit in str(num))\n\ndef skjkasdkd(lst):\n    \"\"\"Given a list of integers, find the largest prime value and return the sum of its digits.\"\"\"\n    max_prime = None\n    # Loop through the list to find the largest prime\n    for num in lst:\n        if is_prime(num) and (max_prime is None or num > max_prime):\n            max_prime = num\n    # If no prime was found, return 0\n    if max_prime is None:\n        return 0\n    # Return the sum of the digits of the largest prime found\n    return sum_of_digits(max_prime)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 95,
        "k_value": 5,
        "code": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False if the given dictionary is empty.\n    \n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n\n    lower_case_used = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    upper_case_used = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n\n    return lower_case_used or upper_case_used",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 96,
        "k_value": 5,
        "code": "def count_up_to(n):\n    def is_prime(num):\n        \"\"\"Helper function to check if a number is prime.\"\"\"\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i+2) == 0:\n                return False\n            i += 6\n        return True\n    \n    # List to store prime numbers\n    prime_numbers = []\n    # Check for prime numbers less than n\n    for i in range(2, n):\n        if is_prime(i):\n            prime_numbers.append(i)\n    \n    return prime_numbers",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 97,
        "k_value": 5,
        "code": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Extracting unit digit using modulo operation.\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    \n    # Multiplying the unit digits\n    product = unit_digit_a * unit_digit_b\n    \n    return product",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 98,
        "k_value": 5,
        "code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    uppercase_vowels = 'AEIOU'  # Define the uppercase vowels\n    count = 0  # Initialize count to 0\n    \n    # Iterate over the string considering only even indices\n    for i in range(0, len(s), 2):\n        if s[i] in uppercase_vowels:\n            count += 1  # Increment count if character is an uppercase vowel\n    \n    return count  # Return the count\n\n# Example usage",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 99,
        "k_value": 5,
        "code": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    \n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n    >>> closest_integer(\"14.5\")\n    15\n    >>> closest_integer(\"-14.5\")\n    -15\n    '''\n    # Convert the input string to a floating point number\n    float_value = float(value)\n    \n    # By default round the number\n    integral_part = int(float_value)\n    fractional_part = float_value - integral_part\n    \n    if abs(fractional_part) == 0.5:\n        # If fractional part is exactly 0.5, we round away from zero\n        if float_value > 0:\n            return integral_part + 1\n        else:\n            return integral_part - 1\n    else:\n        # Use the built-in rounding function which rounds to the nearest integer\n        return round(float_value)\n\n# Example Usage:",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 100,
        "k_value": 5,
        "code": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    stones_per_level = []\n    current_stone_count = n\n    \n    for i in range(n):\n        stones_per_level.append(current_stone_count)\n        if current_stone_count % 2 == 0:\n            # Even number, next even number is current_stone_count + 2\n            current_stone_count += 2\n        else:\n            # Odd number, next odd number is current_stone_count + 2\n            current_stone_count += 2\n            \n    return stones_per_level",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 101,
        "k_value": 5,
        "code": "import re\n\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n\n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # Split the string by comma or space using regular expression\n    words = re.split(r'[,\\s]\\s*', s)\n    # Filter out any empty strings that may occur due to multiple or trailing delimiters\n    return [word for word in words if word]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 102,
        "k_value": 5,
        "code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n\n    if y % 2 == 0:\n        return y\n    elif y - 1 >= x:\n        return y - 1\n    else:\n        return -1",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 103,
        "k_value": 5,
        "code": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        total_sum = sum(range(n, m + 1))  # sum from n to m inclusive\n        count = m - n + 1                # number of terms\n        avg_rounded = round(total_sum / count)  # calculates average and rounds it\n        return bin(avg_rounded)           # converts to binary string",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 104,
        "k_value": 5,
        "code": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x, return a sorted list of all\n    elements that haven't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for number in x:\n        str_number = str(number)\n        has_even_digit = any((int(digit) % 2 == 0 for digit in str_number))\n        if not has_even_digit:\n            result.append(number)\n    return sorted(result)\n\n# Test cases:",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 105,
        "k_value": 5,
        "code": "def by_length(arr):\n    # Create a dictionary to map integers to their word equivalents\n    num_to_word = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\",\n        5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    \n    # Filter to get numbers between 1 and 9\n    filtered_numbers = [num for num in arr if num in num_to_word]\n    \n    # Sort the numbers\n    filtered_numbers.sort()\n    \n    # Reverse the sorted list\n    filtered_numbers.reverse()\n    \n    # Map the numbers to words using the dictionary\n    result = [num_to_word[n] for n in filtered_numbers]\n    \n    return result",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 106,
        "k_value": 5,
        "code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    def factorial(x):\n        if x == 0:\n            return 1\n        product = 1\n        for i in range(1, x + 1):\n            product *= i\n        return product\n    \n    def sum_natural(x):\n        return x * (x + 1) // 2\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_natural(i))\n    return result",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 107,
        "k_value": 5,
        "code": "def even_odd_palindrome(n):\n    def is_palindrome(x):\n        x_str = str(x)\n        return x_str == x_str[::-1]\n    \n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 108,
        "k_value": 5,
        "code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        str_num = str(num)\n        sum_digits = 0\n        is_negative = str_num.startswith('-')\n        \n        for i, char in enumerate(str_num):\n            if char.isdigit():\n                if is_negative and i == 1:\n                    sum_digits -= int(char)\n                else:\n                    sum_digits += int(char)\n\n        if sum_digits > 0:\n            count += 1\n\n    return count",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 109,
        "k_value": 5,
        "code": "def move_one_ball(arr):\n    \"\"\"\n    Determine if it is possible to sort an array using any number of right shifts.\n\n    Args:\n    arr (list): A list of unique integers.\n\n    Returns:\n    bool: True if the list can be sorted by right shifts, otherwise False.\n    \"\"\"\n\n    if not arr:\n        return True\n\n    n = len(arr)\n    # Append the array to itself to facilitate wrap-around checking\n    augmented_arr = arr + arr\n\n    # Finding all possible starting points in the augmented array that could result\n    # in a sorted list of length n\n    sorted_list_count = 0\n    for i in range(n):\n        if all(augmented_arr[i + j] <= augmented_arr[i + j + 1] for j in range(n - 1)):\n            sorted_list_count += 1\n\n    # If there's at least one valid starting point, it's possible\n    return sorted_list_count > 0\n\n# Example tests",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 110,
        "k_value": 5,
        "code": "def exchange(lst1, lst2):\n    # Count how many odd numbers are there in lst1\n    count_odds_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    \n    # Count how many even numbers are there in lst2\n    count_evens_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    \n    # If the number of odd numbers in lst1 is less than or equal to the number of even numbers in lst2\n    # Then we can exchange all odd numbers in lst1 with even numbers from lst2\n    if count_odds_lst1 <= count_evens_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 111,
        "k_value": 5,
        "code": "def histogram(text):\n    words = text.split()\n    counter = {}\n    for word in words:\n        if word in counter:\n            counter[word] += 1\n        else:\n            counter[word] = 1\n    \n    if counter:\n        max_count = max(counter.values())\n        return {k: v for k, v in counter.items() if v == max_count}\n    else:\n        return {}",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 112,
        "k_value": 5,
        "code": "def reverse_delete(s, c):\n    # Remove all characters from s that are in c\n    result_string = ''.join([ch for ch in s if ch not in c])\n    \n    # Check if the result string is a palindrome\n    is_palindrome = result_string == result_string[::-1]\n    \n    # Return the result string and the palindrome check result\n    return (result_string, is_palindrome)\n\n# Example Usages",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 113,
        "k_value": 5,
        "code": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    def count_odds(s):\n        return sum(1 for char in s if int(char) % 2 != 0)\n\n    results = []\n    for j, num_string in enumerate(lst):\n        count = count_odds(num_string)\n        count_str = str(count)\n        result = f\"the number of odd elements {count_str}n the str{count_str}ng {count_str} of the {count_str}nput.\"\n        results.append(result)\n\n    return results",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 114,
        "k_value": 5,
        "code": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n      minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n      minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n\n    min_ending_here = min_so_far = nums[0]\n    for i in range(1, len(nums)):\n        min_ending_here = min(nums[i], min_ending_here + nums[i])\n        min_so_far = min(min_so_far, min_ending_here)\n\n    return min_so_far",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 115,
        "k_value": 5,
        "code": "def max_fill(grid, capacity):\n    import math\n    # Initialize the total count of bucket operations\n    total_operations = 0\n    \n    # Loop through each row (well) in the grid\n    for row in grid:\n        # Count the number of 1's in this row\n        water_units = sum(row)\n        \n        # Calculate the number of bucket operations needed to remove all water\n        # We use math.ceil to round up to account for the last non-full bucket if any\n        if capacity > 0:\n            operations_needed = math.ceil(water_units / capacity)\n        else:\n            operations_needed = 0\n        \n        # Add the operations needed for this well to the total count\n        total_operations += operations_needed\n    \n    return total_operations",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 116,
        "k_value": 5,
        "code": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n    \"\"\"\n    # Sort the array with a key that uses a tuple:\n    # (number of ones in binary form, number itself)\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\n# Tests:",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 117,
        "k_value": 5,
        "code": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, this function returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    \"\"\"\n    # Define a list to store the words that meet the criteria\n    result_words = []\n    if not s:\n        return result_words\n    \n    # Define a set of consonant characters\n    consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n    \n    # Split the string into words\n    words = s.split()\n    \n    # Iterate through each word in the list\n    for word in words:\n        # Count the consonants\n        consonant_count = sum(1 for letter in word if letter in consonants)\n        \n        # If the count of consonants is exactly n, append the word to result\n        if consonant_count == n:\n            result_words.append(word)\n            \n    return result_words\n\n",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 118,
        "k_value": 5,
        "code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    \n    # Start from the end of the word, going to the beginning\n    for i in range(len(word) - 2, 0, -1):\n        # Check if the current character is a vowel and if it is sandwiched between two consonants\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    \n    return \"\"  # Return empty string if no such vowel is found\n\n# Example tests",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 119,
        "k_value": 5,
        "code": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n    \n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n\n    def is_good(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    a, b = lst[0], lst[1]\n\n    # Check both possible concatenations\n    if is_good(a + b) or is_good(b + a):\n        return 'Yes'\n    else:\n        return 'No'\n\n# Example Usage",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 120,
        "k_value": 5,
        "code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    # First, sort the array. The sorted function will sort the array in ascending order by default.\n    sorted_arr = sorted(arr, reverse=True)\n    \n    # Then, slice the first k elements. We start from 0 up to k for the largest elements\n    result = sorted_arr[:k]\n    \n    # Return the result sorted because the output should be in ascending order\n    return sorted(result)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 121,
        "k_value": 5,
        "code": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==> 0\n    \"\"\"\n    sum_odd_in_even_positions = 0\n    # Loop through the list using index-based loop\n    for index in range(len(lst)):\n        # Check for even positions (since index is 0-based; index is actually even for odd position)\n        if index % 2 == 0:\n            # Check if the element is odd\n            if lst[index] % 2 != 0:\n                sum_odd_in_even_positions += lst[index]\n\n    return sum_odd_in_even_positions",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 122,
        "k_value": 5,
        "code": "def add_elements(arr, k):\n    sum_digits = 0  # Step 1: Initialize a sum variable to 0\n    for element in arr[:k]:  # Step 2: Iterate over the first k elements of the array\n        if abs(element) < 100:  # Step 3: Check if the current element has at most two digits\n            sum_digits += element  # Step 4: Add to sum if condition is met\n    return sum_digits  # Step 5: Return the sum of qualifying elements\n\n# Example usage\narr = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\nk = 4",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 123,
        "k_value": 5,
        "code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    current = n\n    while current != 1:\n        if current % 2 == 1:  # Check if the number is odd\n            odd_numbers.append(current)\n        if current % 2 == 0:\n            current = current // 2\n        else:\n            current = 3 * current + 1\n    odd_numbers.append(1)  # Include 1 as it's a part of every Collatz sequence\n    return sorted(odd_numbers)\n\n# Example usage:\n# print(get_odd_collatz(5)) # Output: [1, 5]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 124,
        "k_value": 5,
        "code": "def valid_date(date):\n    import re\n    \n    # Regex to validate the proper date format mm-dd-yyyy\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n        return False\n\n    # Splitting the date to extract month, day, and year\n    month, day, year = map(int, date.split('-'))\n    \n    # Check for the range of month and year\n    if not (1 <= month <= 12):\n        return False\n    \n    # Months with 31 days\n    if month in (1, 3, 5, 7, 8, 10, 12):\n        if not (1 <= day <= 31):\n            return False\n    \n    # Months with 30 days\n    elif month in (4, 6, 9, 11):\n        if not (1 <= day <= 30):\n            return False\n    \n    # February month day checking, including leap year calculation\n    elif month == 2:\n        if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:  # Leap year check\n            if not (1 <= day <= 29):\n                return False\n        else:\n            if not (1 <= day <= 28):\n                return False\n    \n    return True",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 125,
        "k_value": 5,
        "code": "def split_words(txt):\n    # Check if there are white spaces in the text\n    if ' ' in txt:\n        return txt.split()\n    # Check if there are commas in the text\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        # Count the number of lowercase letters with odd order in the alphabet\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 1)\n\n# Test cases for the function",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 126,
        "k_value": 5,
        "code": "def is_sorted(lst):\n    # Check for duplicates appearing more than twice\n    if any(lst.count(x) > 2 for x in lst):\n        return False\n    \n    # Check if the list is in ascending order\n    for i in range(1, len(lst)):\n        if lst[i - 1] > lst[i]:\n            return False\n    \n    return True",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 127,
        "k_value": 5,
        "code": "def intersection(interval1, interval2):\n    # Calculate the intersection start and end values\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:\n        # If no intersection exists\n        return \"NO\"\n    \n    # Length of the intersection\n    length = end - start\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef is_prime(num):\n    # Function to check if a number is a prime number\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while (i * i) <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 128,
        "k_value": 5,
        "code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    product_of_signs = 1\n    sum_of_magnitudes = 0\n    \n    for number in arr:\n        if number > 0:\n            product_of_signs *= 1\n        elif number < 0:\n            product_of_signs *= -1\n        else:  # number is zero\n            product_of_signs *= 0\n        \n        sum_of_magnitudes += abs(number)\n    \n    return sum_of_magnitudes * product_of_signs",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 129,
        "k_value": 5,
        "code": "from heapq import heappop, heappush\n\ndef minPath(grid, k):\n    n = len(grid)\n    \n    # Utility function to get the value of a position in the grid\n    def get_value(x, y):\n        if 0 <= x < n and 0 <= y < n:\n            return grid[x][y]\n        return float('inf')\n    \n    # Directions for moving in the grid\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    \n    # Min-heap to store the paths based on lexicographical order of values visited\n    heap = []\n    \n    # Initialize heap with all possible starting points\n    for i in range(n):\n        for j in range(n):\n            heappush(heap, ([grid[i][j]], i, j, 1))  # (current_path, x_position, y_position, path_length)\n\n    # Process the heap to find minimum lexicographical path of length k\n    while heap:\n        path, x, y, length = heappop(heap)\n        \n        if length == k:\n            return path\n        \n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n:\n                new_path = path + [grid[nx][ny]]\n                heappush(heap, (new_path, nx, ny, length + 1))\n\n    # In case no path is found, return an empty list (Shouldn't happen due to the problem constraints)\n    return []",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 130,
        "k_value": 5,
        "code": "def tri(n):\n    # Define a list to store Tribonacci sequence, starting with tri(0)\n    result = [1]\n    \n    if n == 0:\n        return result\n    \n    # Handle initial known values\n    if n >= 1:\n        result.append(3)  # tri(1) = 3\n    if n >= 2:\n        result.append(1 + 2 // 2)  # tri(2) = 1 + (2 / 2) = 2\n    if n >= 3:\n        result.append(8)  # tri(3) = tri(2) + tri(1) + tri(4) based on the given formula\n    \n    # Start computations from 4 to n\n    for i in range(4, n + 1):\n        if i % 2 == 0:\n            # If 'i' is even: tri(i) = 1 + i / 2\n            result.append(1 + i // 2)\n        else:\n            # If 'i' is odd: tri(i) = tri(i-1) + tri(i-2) + tri(i+1) where i+1 is even\n            # Calculate tri(i+1) as it's not in result yet\n            tri_next = 1 + (i + 1) // 2\n            tri_current = result[i - 1] + result[i - 2] + tri_next\n            result.append(tri_current)\n\n    return result",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 131,
        "k_value": 5,
        "code": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1) == 1\n    digits(4) == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n        n //= 10\n\n    if not has_odd:\n        return 0\n\n    return product",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 132,
        "k_value": 5,
        "code": "def is_nested(string):\n    balance = 0\n    nested = False\n    \n    for char in string:\n        if char == '[':\n            balance += 1\n        elif char == ']':\n            balance -= 1\n        \n        # If the balance goes back to zero and was previously greater than 1,\n        # it means one full nesting level has been closed\n        if balance == 0 and nested:\n            return True\n        # If balance is 2 or more, it indicates a nesting\n        if balance >= 2:\n            nested = True\n            \n    return False",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 133,
        "k_value": 5,
        "code": "import math\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int (Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    return sum(math.ceil(x)**2 for x in lst)\n\n# Test examples",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 134,
        "k_value": 5,
        "code": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") ➞ False\n    check_if_last_char_is_a_letter(\"apple pi e\") ➞ True\n    check_if_last_char_is_a_letter(\"apple pi e \") ➞ False\n    check_if_last_char_is_a_letter(\"\") ➞ False \n    '''\n    # Step 1: Check if the input string is empty\n    if not txt:\n        return False\n\n    # Step 2: Trim trailing whitespace\n    trimmed_text = txt.rstrip()\n\n    # Step 3: Check if the last character exists and is alphabetical\n    if len(trimmed_text) > 0 and trimmed_text[-1].isalpha():\n        # Step 4: Check if the last alphabetical character is not part of a word\n        if len(trimmed_text) == 1 or trimmed_text[-2] == ' ':\n            return True\n\n    return False",
        "passed": false,
        "error_type": "AssertionError",
        "error_info": ""
    },
    {
        "sample_id": 135,
        "k_value": 5,
        "code": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            largest_index = i\n    return largest_index",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 136,
        "k_value": 5,
        "code": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n\n    return (largest_negative, smallest_positive)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 137,
        "k_value": 5,
        "code": "def compare_one(a, b):\n    def to_float(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.')\n        return float(x)\n    \n    float_a = to_float(a)\n    float_b = to_float(b)\n    \n    if float_a > float_b:\n        return a\n    elif float_b > float_a:\n        return b\n    else:\n        return None\n\n# Test the function with provided examples",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 138,
        "k_value": 5,
        "code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers.\n    \n    Args:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if n can be written as the sum of exactly 4 positive even numbers, False otherwise.\n \n    Example:\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    is_equal_to_sum_even(10) == True\n    is_equal_to_sum_even(14) == True\n    is_equal_to_sum_even(222) == True\n    \"\"\"\n    # Since smallest sum of four positive even numbers is 8 (2+2+2+2)\n    if n < 8:\n        return False\n    # Check if n is itself even\n    return n % 2 == 0",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 139,
        "k_value": 5,
        "code": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x - 1)\n\n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n\n    return result",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 140,
        "k_value": 5,
        "code": "import re\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with \"-\" \n    \n    Args:\n    text (str): The input string to process.\n    \n    Returns:\n    str: Modified string with spaces replaced by underscores or hyphens.\n    \"\"\"\n    # Replace regions of text with more than two consecutive spaces with \"-\"\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining single spaces with \"_\"\n    text = re.sub(r' ', '_', text)\n    return text",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 141,
        "k_value": 5,
        "code": "def file_name_check(file_name):\n    import re\n    \n    # Define the valid extensions\n    valid_extensions = {'txt', 'exe', 'dll'}\n    \n    # Split the file name by '.'\n    parts = file_name.split('.')\n    \n    # Check if there's exactly one dot in the file name\n    if len(parts) != 2:\n        return 'No'\n    \n    # Assign name and extension parts\n    name, extension = parts[0], parts[1]\n    \n    # Check if the substring before the dot meets the criteria\n    # It must start with a latin alphabet letter and have not more than three digits\n    if not name or not name[0].isalpha() or len(re.findall(r'\\d', name)) > 3:\n        return 'No'\n    \n    # Check that the extension is one of the valid options\n    if extension not in valid_extensions:\n        return 'No'\n    \n    return 'Yes'\n\n",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 142,
        "k_value": 5,
        "code": "def sum_squares(lst):\n    total_sum = 0\n    \n    for i, num in enumerate(lst):\n        if i % 3 == 0 and i % 4 == 0:\n            total_sum += num ** 2  # Square if index is multiple of 3 and 4 (common multiples)\n        elif i % 3 == 0:\n            total_sum += num ** 2  # Square if index is multiple of 3\n        elif i % 4 == 0:\n            total_sum += num ** 3  # Cube if index is multiple of 4\n        else:\n            total_sum += num  # Add the number itself if index is not multiple of 3 or 4\n\n    return total_sum",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 143,
        "k_value": 5,
        "code": "def words_in_sentence(sentence):\n    \"\"\"\n    Return a string containing the words from the input sentence,\n    where each word's length is a prime number.\n    \"\"\"\n    def is_prime(n):\n        \"\"\" Helper function to check if a number is prime. \"\"\"\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)\n\n# Example usages:",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 144,
        "k_value": 5,
        "code": "def simplify(x, n):\n    # Helper function to find gcd of two numbers\n    def gcd(a, b):\n        while b != 0:\n            a, b = b, a % b\n        return a\n    \n    # Parse the input fractions into integers\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    # Multiply the fractions:\n    # (x_num / x_den) * (n_num / n_den) = (x_num * n_num) / (x_den * n_den)\n    result_num = x_num * n_num\n    result_den = x_den * n_den\n    \n    # To check if result is a whole number, we check if result_num is divisible by result_den\n    # Simplify the result by dividing by gcd\n    result_gcd = gcd(result_num, result_den)\n    result_num //= result_gcd\n    result_den //= result_gcd\n    \n    # If the denominator becomes 1 after simplification, then it's a whole number\n    return result_den == 1\n\n# Test cases from description",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 145,
        "k_value": 5,
        "code": "def order_by_points(nums):\n    def compute_digit_sum(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    # Map nums to (value, original index) tuples and sort them\n    sorted_by_digit_sum = sorted(enumerate(nums), key=lambda x: (compute_digit_sum(x[1]), x[0]))\n\n    # Extract only the sorted values\n    return [x[1] for x in sorted_by_digit_sum]",
        "passed": false,
        "error_type": "AssertionError",
        "error_info": ""
    },
    {
        "sample_id": 146,
        "k_value": 5,
        "code": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10:\n            # Absolute value to handle negative numbers correctly\n            str_num = str(abs(num))\n            first_digit = int(str_num[0])\n            last_digit = int(str_num[-1])\n            \n            # Check if both the first and last digits are odd\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 147,
        "k_value": 5,
        "code": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    # Ensure the input n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    # Generate the array a\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n\n    # Initialize the count of valid triples\n    triples_count = 0\n    \n    # Iterate over all possible triples (i, j, k)\n    for i in range(n-2):  # i goes from 0 to n-3\n        for j in range(i + 1, n-1):  # j goes from i+1 to n-2\n            for k in range(j + 1, n):  # k goes from j+1 to n-1\n                # Check if the sum of the triple (a[i], a[j], a[k]) is a multiple of 3\n                sum_triple = a[i] + a[j] + a[k]\n                if sum_triple % 3 == 0:\n                    triples_count += 1\n    \n    # Return the result\n    return triples_count",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 148,
        "k_value": 5,
        "code": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closest to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    if index1 > index2:\n        index1, index2 = index2, index1\n    \n    return tuple(planets[index1+1:index2])\n\n# Testing the function",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 149,
        "k_value": 5,
        "code": "def sorted_list_sum(lst):\n    # Filter the list to remove strings with odd lengths\n    even_length_list = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort the filtered list first by length, then alphabetically\n    even_length_list_sorted = sorted(even_length_list, key=lambda x: (len(x), x))\n    \n    return even_length_list_sorted\n\n# Example usage of the function:\n",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 150,
        "k_value": 5,
        "code": "def is_prime(n):\n    \"\"\" Helper function to check if a number is prime \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\" Returns the value of x if n is a prime number and y otherwise. \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n\n# Example usage",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 151,
        "k_value": 5,
        "code": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    Args:\n    lst (list): A list of numbers.\n    \n    Returns:\n    int: The sum of squared odd integers that are non-negative.\n    '''\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            sum_of_squares += num ** 2\n    return sum_of_squares\n\n# Example usage",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 152,
        "k_value": 5,
        "code": "def compare(game, guess):\n    \"\"\"\n    Compare the actual game outcomes with the guesses made by a person.\n\n    :param game: List of integers representing the scores of actual games.\n    :param guess: List of integers representing the guesses made for the scores.\n    :return: List of integers indicating the absolute difference between games and guesses.\n    \"\"\"\n    # Initialize an empty list to store the differences\n    differences = []\n    \n    # Iterate through the indices of either `game` or `guess` lists\n    for i in range(len(game)):\n        # Calculate the absolute difference between the game score and the guess\n        difference = abs(game[i] - guess[i])\n        # Append the calculated difference to the differences list\n        differences.append(difference)\n    \n    # Return the list of differences\n    return differences\n\n# Example usage:",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 153,
        "k_value": 5,
        "code": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        return CAP - SM\n\n    strongest_extension = None\n    max_strength = float('-inf')\n\n    for extension in extensions:\n        strength = calculate_strength(extension)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n\n    return f\"{class_name}.{strongest_extension}\"",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 154,
        "k_value": 5,
        "code": "def cycpattern_check(a, b):\n    \"\"\"\n    Check if any rotation of string b is a substring of string a.\n    \n    Parameters:\n    a (str): The first word in which to seek a substring.\n    b (str): The second word to rotate and check as a substring.\n    \n    Returns:\n    bool: True if any rotation of b is a substring of a, otherwise False.\n    \"\"\"\n    # Check if length of b is more than a, return False immediately.\n    if len(b) > len(a):\n        return False\n\n    # Repeat string b twice to account for cyclic permutations\n    doubled_b = b * 2\n\n    # Check for substrings within the doubled string, minus the last len(b) characters\n    for i in range(len(b)):\n        if doubled_b[i:i+len(b)] in a:\n            return True\n\n    return False",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 155,
        "k_value": 5,
        "code": "def even_odd_count(num):\n    \"\"\"Given an integer, return a tuple that has the number of even and odd digits respectively.\n    \n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # Convert the number to string to iterate through each digit\n    num_str = str(abs(num))\n    \n    # Initialize counters\n    even_count = 0\n    odd_count = 0\n    \n    # Check each digit whether it is even or odd\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return (even_count, odd_count)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 156,
        "k_value": 5,
        "code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numerals = [\n        (1000, \"M\"), (900, \"CM\"), (500, \"D\"), (400, \"CD\"),\n        (100, \"C\"), (90, \"XC\"), (50, \"L\"), (40, \"XL\"),\n        (10, \"X\"), (9, \"IX\"), (5, \"V\"), (4, \"IV\"), (1, \"I\")\n    ]\n    \n    roman_string = []\n    for value, numeral in roman_numerals:\n        while number >= value:\n            roman_string.append(numeral)\n            number -= value\n    \n    return ''.join(roman_string).lower()",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 157,
        "k_value": 5,
        "code": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 158,
        "k_value": 5,
        "code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))  # Returns the count of unique characters in the word\n    \n    # Initialize variables to keep track of the word with maximum unique characters\n    max_unique_count = 0\n    max_word = \"\"\n    \n    for word in words:\n        current_unique_count = unique_chars(word)\n        # Update if the current word has more unique characters or is lexicographically smaller with the same count\n        if (current_unique_count > max_unique_count) or (current_unique_count == max_unique_count and word < max_word):\n            max_unique_count = current_unique_count\n            max_word = word\n    \n    return max_word\n\n# Test cases",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 159,
        "k_value": 5,
        "code": "def eat(number, need, remaining):\n    # Calculate how many additional carrots to eat\n    if remaining >= need:\n        eaten = need  # Eat all needed carrots as they are available\n        remaining -= need\n    else:\n        eaten = remaining  # Eat only what is available, lesser than needed\n        remaining = 0\n\n    # Calculate the total number of eaten carrots after this meal\n    total_eaten = number + eaten\n\n    # Return the total number of eaten carrots and the number left\n    return [total_eaten, remaining]",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 160,
        "k_value": 5,
        "code": "def do_algebra(operators, operands):\n    \"\"\"\n    Given two lists operators, and operands. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebraic \n    expression and return the evaluation of this expression.\n\n    Parameters:\n    - operators: List[str] - operation symbols (e.g., '+', '-', '*', '//', '**')\n    - operands: List[int] - list of integers to be combined by the operators\n\n    Returns:\n    - int - The result of the evaluated arithmetic expression.\n\n    Example:\n    operators = ['+', '*', '-']\n    operands = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n    \"\"\"\n    expression = str(operands[0])  # Start the expression with the first operand.\n\n    for i, operator in enumerate(operators):\n        expression += f\" {operator} {operands[i + 1]}\"\n\n    return eval(expression)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 161,
        "k_value": 5,
        "code": "def solve(s):\n    has_letters = any(char.isalpha() for char in s)\n\n    if not has_letters:\n        return s[::-1]\n    \n    result = []\n    for char in s:\n        if char.islower():\n            result.append(char.upper())\n        elif char.isupper():\n            result.append(char.lower())\n        else:\n            result.append(char)\n    \n    return ''.join(result)",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 162,
        "k_value": 5,
        "code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    \n    hash_object = hashlib.md5(text.encode())\n    md5_hash = hash_object.hexdigest()\n    return md5_hash",
        "passed": true,
        "error_type": "NoneType",
        "error_info": "None"
    },
    {
        "sample_id": 163,
        "k_value": 5,
        "code": "def generate_integers(a, b):\n    # Determine the minimum and maximum between a and b\n    min_value = min(a, b)\n    max_value = max(a, b)\n    \n    # Initialize an empty list to store even numbers\n    even_numbers = []\n    \n    # Iterate from min_value to max_value (inclusive)\n    for number in range(min_value, max_value + 1):\n        # Check if the number is even\n        if number % 2 == 0:\n            even_numbers.append(number)\n            \n    # Return the list of even numbers\n    return even_numbers",
        "passed": false,
        "error_type": "AssertionError",
        "error_info": "Test 1"
    }
]